ARM GAS  /tmp/ccP46s5c.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_hal_irda.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.IRDA_EndTxTransfer,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	IRDA_EndTxTransfer:
  25              	.LFB100:
  26              		.file 1 "./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c"
   1:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
   2:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ******************************************************************************
   3:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @file    stm32f1xx_hal_irda.c
   4:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @author  MCD Application Team
   5:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @version V1.1.1
   6:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @date    12-May-2017
   7:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief   IRDA HAL module driver.
   8:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *          This file provides firmware functions to manage the following 
   9:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *          functionalities of the IrDA SIR ENDEC block (IrDA):
  10:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           + Initialization and de-initialization functions
  11:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           + IO operation functions
  12:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           + Peripheral Control functions 
  13:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           + Peripheral State and Errors functions  
  14:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   @verbatim
  15:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
  16:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****                         ##### How to use this driver #####
  17:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
  18:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   [..]
  19:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     The IRDA HAL driver can be used as follows:
  20:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
  21:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Declare a IRDA_HandleTypeDef handle structure.
  22:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Initialize the IRDA low level resources by implementing the HAL_IRDA_MspInit() API:
  23:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (##) Enable the USARTx interface clock.
  24:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (##) IRDA pins configuration:
  25:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Enable the clock for the IRDA GPIOs.
  26:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Configure the IRDA pins as alternate function pull-up.
  27:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_IRDA_Transmit_IT()
  28:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              and HAL_IRDA_Receive_IT() APIs):
  29:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Configure the USARTx interrupt priority.
  30:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Enable the NVIC USART IRQ handle.
  31:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (##) DMA Configuration if you need to use DMA process (HAL_IRDA_Transmit_DMA()
  32:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              and HAL_IRDA_Receive_DMA() APIs):
ARM GAS  /tmp/ccP46s5c.s 			page 2


  33:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  34:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Enable the DMAx interface clock.
  35:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  36:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Configure the DMA Tx/Rx channel.
  37:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Associate the initialized DMA handle to the IRDA DMA Tx/Rx handle.
  38:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  39:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             (+++) Configure the IRDAx interrupt priority and enable the NVIC USART IRQ handle
  40:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  41:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
  42:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Program the Baud Rate, Word Length, Parity, IrDA Mode, Prescaler 
  43:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         and Mode(Receiver/Transmitter) in the hirda Init structure.
  44:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
  45:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Initialize the IRDA registers by calling the HAL_IRDA_Init() API:
  46:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) This API configures also the low level Hardware GPIO, CLOCK, CORTEX...etc)
  47:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              by calling the customized HAL_IRDA_MspInit() API.
  48:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..] 
  49:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (@) The specific IRDA interrupts (Transmission complete interrupt, 
  50:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              RXNE interrupt and Error Interrupts) will be managed using the macros
  51:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              __HAL_IRDA_ENABLE_IT() and __HAL_IRDA_DISABLE_IT() inside the transmit and receive pro
  52:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..]
  53:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         Three operation modes are available within this driver :
  54:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****  
  55:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      *** Polling mode IO operation ***
  56:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      =================================
  57:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..]    
  58:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Send an amount of data in blocking mode using HAL_IRDA_Transmit() 
  59:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Receive an amount of data in blocking mode using HAL_IRDA_Receive()
  60:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        
  61:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      *** Interrupt mode IO operation ***
  62:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      ===================================
  63:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..]    
  64:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Send an amount of data in non blocking mode using HAL_IRDA_Transmit_IT() 
  65:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) At transmission end of transfer HAL_IRDA_TxCpltCallback is executed and user can 
  66:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_TxCpltCallback
  67:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Receive an amount of data in non blocking mode using HAL_IRDA_Receive_IT() 
  68:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) At reception end of transfer HAL_IRDA_RxCpltCallback is executed and user can 
  69:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_RxCpltCallback          
  70:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) In case of transfer Error, HAL_IRDA_ErrorCallback() function is executed and user can 
  71:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_ErrorCallback
  72:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
  73:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      *** DMA mode IO operation ***
  74:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      ==============================
  75:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..] 
  76:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_IRDA_Transmit_DMA() 
  77:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) At transmission end of half transfer HAL_IRDA_TxHalfCpltCallback is executed and user ca
  78:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_TxHalfCpltCallback 
  79:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) At transmission end of transfer HAL_IRDA_TxCpltCallback is executed and user can 
  80:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_TxCpltCallback
  81:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_IRDA_Receive_DMA() 
  82:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) At reception end of half transfer HAL_IRDA_RxHalfCpltCallback is executed and user can 
  83:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_RxHalfCpltCallback 
  84:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) At reception end of transfer HAL_IRDA_RxCpltCallback is executed and user can 
  85:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_RxCpltCallback
  86:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) In case of transfer Error, HAL_IRDA_ErrorCallback() function is executed and user can 
  87:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_ErrorCallback
  88:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Pause the DMA Transfer using HAL_IRDA_DMAPause()
  89:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Resume the DMA Transfer using HAL_IRDA_DMAResume()
ARM GAS  /tmp/ccP46s5c.s 			page 3


  90:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) Stop the DMA Transfer using HAL_IRDA_DMAStop()
  91:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
  92:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      *** IRDA HAL driver macros list ***
  93:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      ====================================
  94:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..]
  95:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        Below the list of most used macros in IRDA HAL driver.
  96:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
  97:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_ENABLE: Enable the IRDA peripheral 
  98:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_DISABLE: Disable the IRDA peripheral
  99:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_GET_FLAG : Check whether the specified IRDA flag is set or not
 100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_CLEAR_FLAG : Clear the specified IRDA pending flag
 101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_ENABLE_IT: Enable the specified IRDA interrupt
 102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_DISABLE_IT: Disable the specified IRDA interrupt
 103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (+) __HAL_IRDA_GET_IT_SOURCE: Check whether the specified IRDA interrupt has occurred or not
 104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..]
 106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (@) You can refer to the IRDA HAL driver header file for more useful macros
 107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   @endverbatim
 108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      [..]
 109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        (@) Additionnal remark: If the parity is enabled, then the MSB bit of the data written
 110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            in the data register is transmitted but is changed by the parity bit.
 111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            the possible IRDA frame formats are as listed in the following table:
 113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     +-------------------------------------------------------------+
 114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |   M bit |  PCE bit  |            IRDA frame                 |
 115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |---------------------|---------------------------------------|
 116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |    0    |    0      |    | SB | 8 bit data | 1 STB |          |
 117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |---------|-----------|---------------------------------------|
 118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |    0    |    1      |    | SB | 7 bit data | PB | 1 STB |     |
 119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |---------|-----------|---------------------------------------|
 120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |    1    |    0      |    | SB | 9 bit data | 1 STB |          |
 121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |---------|-----------|---------------------------------------|
 122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     |    1    |    1      |    | SB | 8 bit data | PB | 1 STB |     |
 123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     +-------------------------------------------------------------+
 124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ******************************************************************************
 125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @attention
 126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
 127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
 129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * Redistribution and use in source and binary forms, with or without modification,
 130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * are permitted provided that the following conditions are met:
 131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *      this list of conditions and the following disclaimer.
 133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *      this list of conditions and the following disclaimer in the documentation
 135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *      and/or other materials provided with the distribution.
 136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *      may be used to endorse or promote products derived from this software
 138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *      without specific prior written permission.
 139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
 140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
ARM GAS  /tmp/ccP46s5c.s 			page 4


 147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
 151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ******************************************************************************
 152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Includes ------------------------------------------------------------------*/
 155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** #include "stm32f1xx_hal.h"
 156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @addtogroup STM32F1xx_HAL_Driver
 158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA IRDA
 162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief HAL IRDA module driver
 163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** #ifdef HAL_IRDA_MODULE_ENABLED
 166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Private typedef -----------------------------------------------------------*/
 168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Private define ------------------------------------------------------------*/
 169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @addtogroup IRDA_Private_Constants
 170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @}
 174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Private macro -------------------------------------------------------------*/
 176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Private variables ---------------------------------------------------------*/
 177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Private function prototypes -----------------------------------------------*/
 178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @addtogroup IRDA_Private_Functions
 179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_SetConfig (IRDA_HandleTypeDef *hirda);
 182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda);
 183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda);
 184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Receive_IT(IRDA_HandleTypeDef *hirda);
 185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATransmitHalfCplt(DMA_HandleTypeDef *hdma);
 187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAReceiveHalfCplt(DMA_HandleTypeDef *hdma);
 189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAError(DMA_HandleTypeDef *hdma);
 190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, Flag
 196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_EndTxTransfer(IRDA_HandleTypeDef *hirda);
 197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda);
 198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @}
 200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /* Exported functions ---------------------------------------------------------*/
 202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions IrDA Exported Functions
 203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
ARM GAS  /tmp/ccP46s5c.s 			page 5


 204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group1 IrDA Initialization and de-initialization functions 
 207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *  @brief    Initialization and Configuration functions 
 208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
 209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** @verbatim
 210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
 211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             ##### Initialization and Configuration functions #####
 212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
 213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     [..]
 214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy 
 215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     in IrDA mode.
 216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) BaudRate
 218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) WordLength 
 219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              in the data register is transmitted but is changed by the parity bit.
 221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              please refer to Reference manual for possible IRDA frame formats.
 223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) Prescaler: A pulse of width less than two and greater than one PSC period(s) may or ma
 224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              not be rejected. The receiver set up time should be managed by software. The IrDA phys
 225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              specification specifies a minimum of 10 ms delay between transmission and 
 226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              reception (IrDA is a half duplex protocol).
 227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) Mode: Receiver/transmitter modes
 228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) IrDAMode: the IrDA can operate in the Normal mode or in the Low power mode.
 229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     [..]
 230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     The HAL_IRDA_Init() API follows IRDA configuration procedures (details for the procedures
 231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     are available in reference manual).
 232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** @endverbatim
 234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Initializes the IRDA mode according to the specified
 239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         parameters in the IRDA_InitTypeDef and create the associated handle.
 240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
 245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda == NULL)
 248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_ERROR;
 250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the parameters */
 253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
 254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_RESET)
 256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Allocate lock resource and initialize it */
 258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->Lock = HAL_UNLOCKED;
 259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_IRDA_MspInit(hirda);
ARM GAS  /tmp/ccP46s5c.s 			page 6


 261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_BUSY;
 264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA peripheral */
 266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_IRDA_DISABLE(hirda);
 267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Set the IRDA communication parameters */
 269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_SetConfig(hirda);
 270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* In IrDA mode, the following bits must be kept cleared: 
 272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
 273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
 274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_STOP | USART_CR2_CLKEN));
 275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Enable the IRDA peripheral */
 278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_IRDA_ENABLE(hirda);
 279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Set the prescaler */
 281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
 282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Configure the IrDA mode */
 284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.IrDAMode);
 285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
 287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   SET_BIT(hirda->Instance->CR3, USART_CR3_IREN);
 288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Initialize the IRDA state*/
 290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState= HAL_IRDA_STATE_READY;
 292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState= HAL_IRDA_STATE_READY;
 293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DeInitializes the IRDA peripheral
 299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DeInit(IRDA_HandleTypeDef *hirda)
 304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda == NULL)
 307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_ERROR;
 309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the parameters */
 312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
 313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_BUSY;
 315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the Peripheral */
 317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_IRDA_DISABLE(hirda);
ARM GAS  /tmp/ccP46s5c.s 			page 7


 318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DeInit the low level hardware */
 320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_MspDeInit(hirda);
 321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_RESET; 
 324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_RESET;
 325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Release Lock */
 327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  IRDA MSP Init.
 334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
 337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_MspInit(IRDA_HandleTypeDef *hirda)
 339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
 342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            the HAL_IRDA_MspInit can be implemented in the user file
 344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 348:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  IRDA MSP DeInit.
 349:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
 352:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_MspDeInit(IRDA_HandleTypeDef *hirda)
 354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 355:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
 357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 358:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            the HAL_IRDA_MspDeInit can be implemented in the user file
 359:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 360:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 361:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @}
 364:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 366:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group2 IO operation functions 
 367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *  @brief   IRDA Transmit and Receive functions 
 368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
 369:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** @verbatim
 370:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
 371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****                          ##### IO operation functions #####
 372:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
 373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   [..]
 374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     This subsection provides a set of functions allowing to manage the IRDA data transfers.
ARM GAS  /tmp/ccP46s5c.s 			page 8


 375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 376:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 378:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     While receiving data, transmission should be avoided as the data to be transmitted
 379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     could be corrupted.
 380:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 381:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) There are two modes of transfer:
 382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) Blocking mode: The communication is performed in polling mode. 
 383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              The HAL status of all data processing is returned by the same function 
 384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              after finishing transfer.  
 385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) No-Blocking mode: The communication is performed using Interrupts 
 386:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              or DMA, these APIs return the HAL status.
 387:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              The end of the data processing will be indicated through the 
 388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              dedicated IRDA IRQ when using Interrupt mode or the DMA IRQ when 
 389:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              using DMA mode.
 390:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              The HAL_IRDA_TxCpltCallback(), HAL_IRDA_RxCpltCallback() user callbacks 
 391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              will be executed respectively at the end of the transmit or Receive process
 392:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              The HAL_IRDA_ErrorCallback() user callback will be executed when a communication 
 393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****              error is detected
 394:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 395:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Blocking mode APIs are:
 396:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Transmit()
 397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Receive()
 398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
 399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Non Blocking mode APIs with Interrupt are:
 400:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Transmit_IT()
 401:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Receive_IT()
 402:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_IRQHandler()
 403:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) Non Blocking mode functions with DMA are:
 405:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Transmit_DMA()
 406:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_Receive_DMA()
 407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_DMAPause()
 408:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_DMAResume()
 409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_DMAStop()
 410:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     (#) A set of Transfer Complete Callbacks are provided in non Blocking mode:
 412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_TxHalfCpltCallback()
 413:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_TxCpltCallback()
 414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_RxHalfCpltCallback()
 415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_RxCpltCallback()
 416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         (++) HAL_IRDA_ErrorCallback()
 417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** @endverbatim
 419:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
 420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Sends an amount of data in blocking mode.
 424:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 425:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  pData: Pointer to data buffer
 427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Size: Amount of data to be sent
 428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Timeout: Specify timeout value  
 429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 430:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 431:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint3
ARM GAS  /tmp/ccP46s5c.s 			page 9


 432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
 434:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t tickstart = 0U;
 435:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_READY)
 438:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if((pData == NULL) || (Size == 0U))
 440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return  HAL_ERROR;
 442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 443:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 444:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 446:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Init tickstart for timeout managment */
 451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     tickstart = HAL_GetTick();
 452:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     while(hirda->TxXferCount > 0U)
 456:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->TxXferCount--;
 458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 459:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           return HAL_TIMEOUT;
 463:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         tmp = (uint16_t*) pData;
 465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->Instance->DR = (*tmp & (uint16_t)0x01FF);
 466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(hirda->Init.Parity == IRDA_PARITY_NONE)
 467:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           pData +=2U;
 469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 470:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         else
 471:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           pData +=1U;
 473:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 474:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 475:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
 476:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           return HAL_TIMEOUT;
 480:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->Instance->DR = (*pData++ & (uint8_t)0xFF);
 482:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 483:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 486:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     { 
 487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return HAL_TIMEOUT;
 488:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
ARM GAS  /tmp/ccP46s5c.s 			page 10


 489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 490:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* At end of Tx process, restore hirda->gState to Ready */
 491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_READY;
 492:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 493:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 498:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
 499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 501:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 503:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 504:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Receive an amount of data in blocking mode. 
 506:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 508:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  pData: Pointer to data buffer
 509:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Size: Amount of data to be received
 510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Timeout: Specify timeout value    
 511:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint32
 514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 515:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
 516:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t tickstart = 0U;
 517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 518:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 519:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_READY) 
 520:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if((pData == NULL) || (Size == 0U))
 522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 523:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return  HAL_ERROR;
 524:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 526:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 531:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Init tickstart for timeout managment */
 533:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     tickstart = HAL_GetTick();
 534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 535:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 536:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = Size;
 537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 538:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Check the remain data to be received */
 539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     while(hirda->RxXferCount > 0U)
 540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 541:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->RxXferCount--;
 542:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 543:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
ARM GAS  /tmp/ccP46s5c.s 			page 11


 546:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           return HAL_TIMEOUT;
 547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 548:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         tmp = (uint16_t*)pData;
 549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(hirda->Init.Parity == IRDA_PARITY_NONE)
 550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           *tmp = (uint16_t)(hirda->Instance->DR & (uint16_t)0x01FF);
 552:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           pData +=2U;
 553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 554:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         else
 555:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 556:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           *tmp = (uint16_t)(hirda->Instance->DR & (uint16_t)0x00FF);
 557:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           pData +=1U;
 558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 559:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       } 
 560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
 561:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 562:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           return HAL_TIMEOUT;
 565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(hirda->Init.Parity == IRDA_PARITY_NONE)
 567:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 568:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           *pData++ = (uint8_t)(hirda->Instance->DR & (uint8_t)0x00FF);
 569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 570:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         else
 571:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           *pData++ = (uint8_t)(hirda->Instance->DR & (uint8_t)0x007F);
 573:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 575:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 577:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* At end of Rx process, restore hirda->RxState to Ready */
 578:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 579:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 583:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 585:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
 586:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 587:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 588:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 590:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 592:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Sends an amount of data in non blocking mode.
 593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 595:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  pData: Pointer to data buffer
 596:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Size: Amount of data to be sent
 597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 599:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 601:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 602:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_READY)
ARM GAS  /tmp/ccP46s5c.s 			page 12


 603:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if((pData == NULL) || (Size == 0U)) 
 605:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return HAL_ERROR;
 607:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 608:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 611:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->pTxBuffPtr = pData;
 612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 614:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 615:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 617:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 618:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 619:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 620:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 621:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Transmit data register empty Interrupt */
 622:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_TXE);
 623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 624:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 625:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
 627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 629:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 630:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 631:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 632:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 633:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Receives an amount of data in non blocking mode. 
 634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 635:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  pData: Pointer to data buffer
 637:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Size: Amount of data to be received
 638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 639:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 642:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_READY)
 644:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if((pData == NULL) || (Size == 0U))
 646:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 647:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return HAL_ERROR;
 648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 649:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 650:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 652:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->pRxBuffPtr = pData;
 654:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = Size;
 656:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 659:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
ARM GAS  /tmp/ccP46s5c.s 			page 13


 660:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 661:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 663:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Parity Error Interrupt */
 664:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_PE);
 665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
 667:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_ERR);
 668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 669:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Data Register not empty Interrupt */
 670:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_RXNE);
 671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 672:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 673:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 674:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
 675:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 676:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 677:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 678:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 679:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 681:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Sends an amount of data in non blocking mode. 
 682:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 683:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 684:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  pData: Pointer to data buffer
 685:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Size: Amount of data to be sent
 686:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 687:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 688:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 690:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 692:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_READY)
 694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if((pData == NULL) || (Size == 0U))
 696:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return HAL_ERROR;
 698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 699:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 700:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->pTxBuffPtr = pData;
 704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 706:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 709:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 710:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the IRDA DMA transfer complete callback */
 711:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmatx->XferCpltCallback = IRDA_DMATransmitCplt;
 712:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 713:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the IRDA DMA half transfer complete callback */
 714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmatx->XferHalfCpltCallback = IRDA_DMATransmitHalfCplt;
 715:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 716:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the DMA error callback */
ARM GAS  /tmp/ccP46s5c.s 			page 14


 717:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmatx->XferErrorCallback = IRDA_DMAError;
 718:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the DMA abort callback */
 720:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmatx->XferAbortCallback = NULL;
 721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 722:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA transmit DMA Channel */
 723:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     tmp = (uint32_t*)&pData;
 724:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_DMA_Start_IT(hirda->hdmatx, *(uint32_t*)tmp, (uint32_t)&hirda->Instance->DR, Size);
 725:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 726:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
 727:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_CLEAR_FLAG(hirda, IRDA_FLAG_TC);
 728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 729:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 730:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 731:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 732:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
 733:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        in the USART CR3 register */
 734:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 736:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 737:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 738:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
 739:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 740:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 741:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 742:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 743:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 744:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Receives an amount of data in non blocking mode. 
 746:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 747:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 748:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  pData: Pointer to data buffer
 749:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Size: Amount of data to be received
 750:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   When the IRDA parity is enabled (PCE = 1) the data received contain the parity bit.
 751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 752:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 753:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 754:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 755:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 756:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 757:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_READY) 
 759:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if((pData == NULL) || (Size == 0U))
 761:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return HAL_ERROR;
 763:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 764:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 765:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Locked */
 766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_LOCK(hirda);
 767:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->pRxBuffPtr = pData;
 769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 770:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 771:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE; 
 772:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 773:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccP46s5c.s 			page 15


 774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the IRDA DMA transfer complete callback */
 775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmarx->XferCpltCallback = IRDA_DMAReceiveCplt;
 776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 777:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the IRDA DMA half transfer complete callback */
 778:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmarx->XferHalfCpltCallback = IRDA_DMAReceiveHalfCplt;
 779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 780:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the DMA error callback */
 781:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmarx->XferErrorCallback = IRDA_DMAError;
 782:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 783:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set the DMA abort callback */
 784:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->hdmarx->XferAbortCallback = NULL;
 785:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 786:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the DMA channel */
 787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     tmp = (uint32_t*)&pData;
 788:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_DMA_Start_IT(hirda->hdmarx, (uint32_t)&hirda->Instance->DR, *(uint32_t*)tmp, Size);
 789:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 790:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the sec
 791:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_CLEAR_OREFLAG(hirda);
 792:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 793:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Process Unlocked */
 794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 795:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 796:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Parity Error Interrupt */
 797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
 798:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 799:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
 800:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 801:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 802:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
 803:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     in the USART CR3 register */
 804:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 805:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 806:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 807:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 808:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
 809:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 810:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 811:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 812:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 814:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 815:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief Pauses the DMA Transfer.
 816:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 817:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 818:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 819:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAPause(IRDA_HandleTypeDef *hirda)
 821:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 822:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 823:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 824:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Process Locked */
 825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_LOCK(hirda);
 826:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 827:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
 828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 830:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable the IRDA DMA Tx request */
ARM GAS  /tmp/ccP46s5c.s 			page 16


 831:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 832:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 833:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
 835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 836:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
 838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
 839:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 840:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 841:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable the IRDA DMA Rx request */
 842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 843:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 844:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 845:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Process Unlocked */
 846:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 847:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 848:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 849:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 851:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 852:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief Resumes the DMA Transfer.
 853:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 855:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 856:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 857:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAResume(IRDA_HandleTypeDef *hirda)
 858:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Process Locked */
 860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_LOCK(hirda);
 861:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_BUSY_TX)
 863:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 864:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA DMA Tx request */
 865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 866:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 867:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_BUSY_RX)
 869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 870:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
 871:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_CLEAR_OREFLAG(hirda);
 872:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 873:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
 874:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
 875:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 876:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 877:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA DMA Rx request */
 878:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 879:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 880:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 881:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Process Unlocked */
 882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 883:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 884:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 885:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 886:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 887:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
ARM GAS  /tmp/ccP46s5c.s 			page 17


 888:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief Stops the DMA Transfer.
 889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
 890:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 891:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 892:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 893:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAStop(IRDA_HandleTypeDef *hirda)
 894:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 895:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 896:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* The Lock is not implemented on this API to allow the user application
 897:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   to call the HAL IRDA API under callbacks HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback():
 898:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
 899:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   and the correspond call back is executed HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback()
 900:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
 901:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 902:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Stop IRDA DMA Tx request if ongoing */
 903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
 904:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 905:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 906:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 907:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 908:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel */
 909:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
 910:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
 912:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
 914:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 915:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 916:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Stop IRDA DMA Rx request if ongoing */
 917:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
 918:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 919:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 920:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 921:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 922:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel */
 923:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
 924:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 925:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
 926:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 927:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
 928:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 929:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 930:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 931:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 932:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 933:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 934:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing transfers (blocking mode).
 935:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
 936:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
 937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
 938:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
 939:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
 940:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
 941:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
 942:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
 943:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
 944:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** */
ARM GAS  /tmp/ccP46s5c.s 			page 18


 945:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Abort(IRDA_HandleTypeDef *hirda)
 946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 947:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 948:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 949:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 950:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
 952:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
 953:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 954:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 955:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 956:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel: use blocking DMA Abort API (no callback) */
 957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
 958:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 959:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null. 
 960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
 961:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
 962:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 963:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
 964:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 965:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 966:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 967:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
 968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 969:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 970:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 971:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 972:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel: use blocking DMA Abort API (no callback) */
 973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
 974:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 975:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null. 
 976:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
 977:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
 978:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
 980:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 981:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 982:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 983:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Reset Tx and Rx transfer counters */
 984:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 985:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 986:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 987:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Reset ErrorCode */
 988:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 989:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 990:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->RxState and hirda->gState to Ready */
 991:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 992:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 993:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 994:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
 995:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 996:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
 998:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
 999:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1001:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
ARM GAS  /tmp/ccP46s5c.s 			page 19


1002:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1004:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1005:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1006:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1007:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1008:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** */
1009:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortTransmit(IRDA_HandleTypeDef *hirda)
1010:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1011:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
1012:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1013:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1014:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1015:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1016:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1017:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1018:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1019:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */
1020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
1021:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1022:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null. 
1023:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
1024:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
1025:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1026:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
1027:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1028:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1029:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1030:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Reset Tx transfer counter */
1031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1032:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1033:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->gState to Ready */
1034:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
1035:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1036:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1037:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1038:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1039:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1041:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1042:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1043:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1044:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1045:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1046:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1047:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1048:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1049:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1050:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** */
1051:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortReceive(IRDA_HandleTypeDef *hirda)
1052:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1053:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1054:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1055:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1056:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1057:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1058:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
ARM GAS  /tmp/ccP46s5c.s 			page 20


1059:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1060:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1061:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1062:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */
1063:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
1064:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1065:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null. 
1066:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
1067:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
1068:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1069:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
1070:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1071:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1072:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1073:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Reset Rx transfer counter */
1074:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1075:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1076:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->RxState to Ready */
1077:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
1078:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1079:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1080:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1081:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1082:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1083:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1084:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1085:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1086:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1087:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1088:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1089:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1090:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1091:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1092:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1093:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1094:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1095:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** */
1096:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Abort_IT(IRDA_HandleTypeDef *hirda)
1097:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1098:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
1099:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to IRDA Handle, DMA Abort complete callbacks sh
1105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      before any call to DMA Abort functions */
1106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Tx Handle is valid */
1107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->hdmatx != NULL)
1108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set DMA Abort Complete callback if IRDA DMA Tx request if enabled.
1110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        Otherwise, set it to NULL */
1111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = IRDA_DMATxAbortCallback;
1114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     else
ARM GAS  /tmp/ccP46s5c.s 			page 21


1116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
1118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Rx Handle is valid */
1121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->hdmarx != NULL)
1122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Set DMA Abort Complete callback if IRDA DMA Rx request if enabled.
1124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****        Otherwise, set it to NULL */
1125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = IRDA_DMARxAbortCallback;
1128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     else
1130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
1132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable DMA Tx at IRDA level */
1139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use non blocking DMA Abort API (callback) */
1142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
1143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* IRDA Tx DMA Abort callback has already been initialised : 
1145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Abort DMA TX */
1148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(HAL_DMA_Abort_IT(hirda->hdmatx) != HAL_OK)
1149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->hdmatx->XferAbortCallback = NULL;
1151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
1153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         AbortCplt = 0x00U;
1155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use non blocking DMA Abort API (callback) */
1165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
1166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* IRDA Rx DMA Abort callback has already been initialised : 
1168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Abort DMA RX */
1171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
1172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
ARM GAS  /tmp/ccP46s5c.s 			page 22


1173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->hdmarx->XferAbortCallback = NULL;
1174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         AbortCplt = 0x01U;
1175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
1177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         AbortCplt = 0x00U;
1179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(AbortCplt == 0x01U)
1185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Reset Tx and Rx transfer counters */
1187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = 0x00U; 
1188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
1189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Reset ErrorCode */
1191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Restore hirda->gState and hirda->RxState to Ready */
1194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState  = HAL_IRDA_STATE_READY;
1195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
1196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_IRDA_AbortCpltCallback(hirda);
1199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** */
1218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortTransmit_IT(IRDA_HandleTypeDef *hirda)
1219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
1221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */
1229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
ARM GAS  /tmp/ccP46s5c.s 			page 23


1230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback : 
1232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = IRDA_DMATxOnlyAbortCallback;
1234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Abort DMA TX */
1236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(HAL_DMA_Abort_IT(hirda->hdmatx) != HAL_OK)
1237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Call Directly hirda->hdmatx->XferAbortCallback function in case of error */
1239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->hdmatx->XferAbortCallback(hirda->hdmatx);
1240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     else
1243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Reset Tx transfer counter */
1245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->TxXferCount = 0x00U;
1246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Restore hirda->gState to Ready */
1248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->gState = HAL_IRDA_STATE_READY;
1249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_IRDA_AbortTransmitCpltCallback(hirda);
1252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
1255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Reset Tx transfer counter */
1257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = 0x00U;
1258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Restore hirda->gState to Ready */
1260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_READY;
1261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_IRDA_AbortTransmitCpltCallback(hirda);
1264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         This procedure performs following operations :
1274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable PPP Interrupts
1275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - Set handle State to READY
1278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** */
1283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortReceive_IT(IRDA_HandleTypeDef *hirda)
1284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
ARM GAS  /tmp/ccP46s5c.s 			page 24


1287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */
1295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
1296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback : 
1298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = IRDA_DMARxOnlyAbortCallback;
1300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Abort DMA RX */
1302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
1303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Call Directly hirda->hdmarx->XferAbortCallback function in case of error */
1305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
1306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     else
1309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Reset Rx transfer counter */
1311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->RxXferCount = 0x00U;
1312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Restore hirda->RxState to Ready */
1314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->RxState = HAL_IRDA_STATE_READY;
1315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_IRDA_AbortReceiveCpltCallback(hirda);
1318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
1321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Reset Rx transfer counter */
1323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
1324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Restore hirda->RxState to Ready */
1326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
1327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_IRDA_AbortReceiveCpltCallback(hirda);
1330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  This function handles IRDA interrupt request.
1337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** void HAL_IRDA_IRQHandler(IRDA_HandleTypeDef *hirda)
1342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t isrflags   = READ_REG(hirda->Instance->SR);
ARM GAS  /tmp/ccP46s5c.s 			page 25


1344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
1345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t cr3its     = READ_REG(hirda->Instance->CR3);
1346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t errorflags = 0x00U;
1347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t dmarequest = 0x00U;
1348:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1349:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* If no error occurs */
1350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
1351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(errorflags == RESET)
1352:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* IRDA in mode Receiver -----------------------------------------------*/
1354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1355:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       IRDA_Receive_IT(hirda);
1357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return;
1358:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1359:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1360:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1361:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* If some errors occur */
1362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE 
1363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1364:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* IRDA parity error interrupt occurred -------------------------------*/
1365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
1366:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_PE;
1368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1369:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1370:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* IRDA noise error interrupt occurred --------------------------------*/
1371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1372:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_NE;
1374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1376:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* IRDA frame error interrupt occurred --------------------------------*/
1377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1378:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_FE;
1380:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1381:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* IRDA Over-Run interrupt occurred -----------------------------------*/
1383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     { 
1385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_ORE;
1386:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1387:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Call IRDA Error Call back function if need be -----------------------*/ 
1388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->ErrorCode != HAL_IRDA_ERROR_NONE)
1389:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1390:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* IRDA in mode Receiver ---------------------------------------------*/
1391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1392:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         IRDA_Receive_IT(hirda);
1394:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1395:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1396:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****          consider error as blocking */
1398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
1399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(((hirda->ErrorCode & HAL_IRDA_ERROR_ORE) != RESET) || dmarequest)
1400:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
ARM GAS  /tmp/ccP46s5c.s 			page 26


1401:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Blocking error : transfer is aborted
1402:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            Set the IRDA state ready to be able to start again the process,
1403:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         IRDA_EndRxTransfer(hirda);
1405:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1406:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Disable the IRDA DMA Rx request if enabled */
1407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1408:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
1409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1410:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           /* Abort the IRDA DMA Rx channel */
1412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           if(hirda->hdmarx != NULL)
1413:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           {
1414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             /* Set the IRDA DMA Abort callback : 
1415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             will lead to call HAL_IRDA_ErrorCallback() at end of DMA abort procedure */
1416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             hirda->hdmarx->XferAbortCallback = IRDA_DMAAbortOnError;
1417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             if(HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
1419:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             {
1420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****               /* Call Directly XferAbortCallback function in case of error */
1421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****               hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
1422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             }
1423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           }
1424:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           else
1425:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           {
1426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             /* Call user error callback */
1427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             HAL_IRDA_ErrorCallback(hirda);
1428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           }
1429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
1430:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         else
1431:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
1432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           /* Call user error callback */
1433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           HAL_IRDA_ErrorCallback(hirda);
1434:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
1435:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
1437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1438:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Non Blocking error : transfer could go on. 
1439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            Error is notified to user through user error callback */
1440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         HAL_IRDA_ErrorCallback(hirda);
1441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1443:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1444:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return;
1445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   } /* End if some error occurs */
1446:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* IRDA in mode Transmitter ------------------------------------------------*/
1448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
1449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_Transmit_IT(hirda);
1451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return;
1452:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* IRDA in mode Transmitter end --------------------------------------------*/
1455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
1456:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndTransmit_IT(hirda);
ARM GAS  /tmp/ccP46s5c.s 			page 27


1458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return;
1459:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1463:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Tx Transfer complete callbacks.
1464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: pointer to a IRDA_HandleTypeDef structure that contains
1465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1467:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda)
1469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1470:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1471:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1473:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            the HAL_IRDA_TxCpltCallback can be implemented in the user file
1474:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */ 
1475:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1476:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Tx Half Transfer completed callbacks.
1479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1480:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified USART module.
1481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1482:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1483:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_TxHalfCpltCallback(IRDA_HandleTypeDef *hirda)
1484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1486:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1488:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            the HAL_IRDA_TxHalfCpltCallback can be implemented in the user file
1489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1490:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1492:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1493:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Rx Transfer complete callbacks.
1494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1498:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *hirda)
1499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1501:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1503:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****            the HAL_IRDA_RxCpltCallback can be implemented in the user file
1504:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1506:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1508:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Rx Half Transfer complete callbacks.
1509:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1511:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_RxHalfCpltCallback(IRDA_HandleTypeDef *hirda)
1514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
ARM GAS  /tmp/ccP46s5c.s 			page 28


1515:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1516:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1518:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_RxHalfCpltCallback can be implemented in the user file
1519:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1520:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1523:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief IRDA error callbacks.
1524:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1526:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda)
1529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1531:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1533:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   the HAL_IRDA_ErrorCallback could be implemented in the user file
1534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */ 
1535:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1536:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1538:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  IRDA Abort Complete callback.
1539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1541:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1542:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_AbortCpltCallback(IRDA_HandleTypeDef *hirda)
1543:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1546:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1548:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_AbortCpltCallback can be implemented in the user file.
1549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    */
1550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1552:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  IRDA Abort Transmit Complete callback.
1554:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1555:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1556:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1557:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_AbortTransmitCpltCallback(IRDA_HandleTypeDef *hirda)
1558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1559:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1561:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1562:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_AbortTransmitCpltCallback can be implemented in the user file.
1564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    */
1565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1567:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1568:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  IRDA Abort ReceiveComplete callback.
1569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda IRDA handle.
1570:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1571:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
ARM GAS  /tmp/ccP46s5c.s 			page 29


1572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** __weak void HAL_IRDA_AbortReceiveCpltCallback(IRDA_HandleTypeDef *hirda)
1573:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1575:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   UNUSED(hirda);
1576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1577:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1578:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             the HAL_IRDA_AbortReceiveCpltCallback can be implemented in the user file.
1579:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    */
1580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1583:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @}
1584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1585:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1586:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group3 Peripheral State and Errors functions 
1587:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *  @brief   IRDA State and Errors functions 
1588:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *
1589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** @verbatim   
1590:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================
1591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****                   ##### Peripheral State and Errors functions #####
1592:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   ==============================================================================  
1593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   [..]
1594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     This subsection provides a set of functions allowing to return the State of IrDA 
1595:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     communication process and also return Peripheral Errors occurred during communication process
1596:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      (+) HAL_IRDA_GetState() API can be helpful to check in run-time the state of the IrDA peripher
1597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      (+) HAL_IRDA_GetError() check in run-time errors that could be occurred during communication. 
1598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****      
1599:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** @endverbatim
1600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @{
1601:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1602:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1603:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Returns the IRDA state.
1605:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1607:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL state
1608:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** HAL_IRDA_StateTypeDef HAL_IRDA_GetState(IRDA_HandleTypeDef *hirda)
1610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1611:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
1612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   temp1 = hirda->gState;
1613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   temp2 = hirda->RxState;
1614:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1615:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return (HAL_IRDA_StateTypeDef)(temp1 | temp2);
1616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1617:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1618:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1619:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Return the IRDA error code
1620:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1621:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1622:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval IRDA Error Code
1623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1624:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** uint32_t HAL_IRDA_GetError(IRDA_HandleTypeDef *hirda)
1625:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return hirda->ErrorCode;
1627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccP46s5c.s 			page 30


1629:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1630:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @}
1631:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1632:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1633:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA transmit process complete callback. 
1635:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
1636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *               the configuration information for the specified DMA module.
1637:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1639:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATransmitCplt(DMA_HandleTypeDef *hdma)
1640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1642:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Normal mode */
1643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
1644:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = 0U;
1646:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
1647:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
1648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     in the IRDA CR3 register */
1649:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1650:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
1651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Enable the IRDA Transmit Complete Interrupt */
1652:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     __HAL_IRDA_ENABLE_IT(hirda, IRDA_IT_TC);
1653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1654:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Circular mode */
1655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
1656:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     HAL_IRDA_TxCpltCallback(hirda);
1658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1659:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1660:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1661:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief DMA IRDA receive process half complete callback 
1663:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
1664:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified DMA module.
1665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1667:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATransmitHalfCplt(DMA_HandleTypeDef *hdma)
1668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1669:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1670:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_TxHalfCpltCallback(hirda); 
1672:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1673:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1674:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1675:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA receive process complete callback. 
1676:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma: DMA handle
1677:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1678:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1679:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAReceiveCplt(DMA_HandleTypeDef *hdma)   
1680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1681:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1682:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Normal mode */
1683:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
1684:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1685:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0U;
ARM GAS  /tmp/ccP46s5c.s 			page 31


1686:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1687:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
1688:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
1689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1690:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
1691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
1692:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     in the IRDA CR3 register */
1693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* At end of Rx process, restore hirda->RxState to Ready */
1696:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
1697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_RxCpltCallback(hirda);
1699:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1700:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief DMA IRDA receive process half complete callback 
1703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
1704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified DMA module.
1705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1706:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAReceiveHalfCplt(DMA_HandleTypeDef *hdma)
1708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1709:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1710:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_RxHalfCpltCallback(hirda); 
1711:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1712:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1713:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA communication error callback.
1715:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma: DMA handle
1716:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1717:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1718:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAError(DMA_HandleTypeDef *hdma)
1719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1720:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
1721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1722:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1723:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Stop IRDA DMA Tx request if ongoing */
1724:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
1725:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
1726:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1727:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = 0U;
1728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
1729:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1730:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1731:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Stop IRDA DMA Rx request if ongoing */
1732:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
1733:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
1734:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0U;
1736:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
1737:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1738:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1739:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode |= HAL_IRDA_ERROR_DMA; 
1740:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1741:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_ErrorCallback(hirda);
1742:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
ARM GAS  /tmp/ccP46s5c.s 			page 32


1743:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1744:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  This function handles IRDA Communication Timeout.
1746:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
1747:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1748:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Flag: specifies the IRDA flag to check.
1749:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Status: The new Flag status (SET or RESET).
1750:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Tickstart: Tick start value
1751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  Timeout: Timeout duration
1752:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1753:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1754:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, Flag
1755:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1756:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Wait until flag is set */
1757:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   while((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
1758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1759:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Check for the Timeout */
1760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(Timeout != HAL_MAX_DELAY)
1761:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
1763:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1764:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
1765:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
1766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1767:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
1768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->gState  = HAL_IRDA_STATE_READY;
1769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->RxState = HAL_IRDA_STATE_READY;
1770:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
1771:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         /* Process Unlocked */
1772:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         __HAL_UNLOCK(hirda);
1773:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
1774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         return HAL_TIMEOUT;
1775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1777:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1778:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
1779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1780:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1781:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1782:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  End ongoing Tx transfer on IRDA peripheral (following error detection or Transmit compl
1783:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: IRDA handle.
1784:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1785:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1786:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_EndTxTransfer(IRDA_HandleTypeDef *hirda)
1787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
  27              		.loc 1 1787 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1788:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
1789:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
  33              		.loc 1 1789 0
  34 0000 0268     		ldr	r2, [r0]
  35 0002 D368     		ldr	r3, [r2, #12]
  36 0004 23F0C003 		bic	r3, r3, #192
ARM GAS  /tmp/ccP46s5c.s 			page 33


  37 0008 D360     		str	r3, [r2, #12]
1790:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1791:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* At end of Tx process, restore hirda->gState to Ready */
1792:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
  38              		.loc 1 1792 0
  39 000a 2023     		movs	r3, #32
  40 000c 80F83530 		strb	r3, [r0, #53]
  41 0010 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE100:
  45 0012 00BF     		.section	.text.IRDA_EndRxTransfer,"ax",%progbits
  46              		.align	2
  47              		.thumb
  48              		.thumb_func
  50              	IRDA_EndRxTransfer:
  51              	.LFB101:
1793:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1795:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1796:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  End ongoing Rx transfer on IRDA peripheral (following error detection or Reception comp
1797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: IRDA handle.
1798:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1799:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1800:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda)
1801:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
  52              		.loc 1 1801 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57              	.LVL1:
1802:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1803:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  58              		.loc 1 1803 0
  59 0000 0268     		ldr	r2, [r0]
  60 0002 D368     		ldr	r3, [r2, #12]
  61 0004 23F49073 		bic	r3, r3, #288
  62 0008 D360     		str	r3, [r2, #12]
1804:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
  63              		.loc 1 1804 0
  64 000a 0268     		ldr	r2, [r0]
  65 000c 5369     		ldr	r3, [r2, #20]
  66 000e 23F00103 		bic	r3, r3, #1
  67 0012 5361     		str	r3, [r2, #20]
1805:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1806:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* At end of Rx process, restore hirda->RxState to Ready */
1807:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
  68              		.loc 1 1807 0
  69 0014 2023     		movs	r3, #32
  70 0016 80F83630 		strb	r3, [r0, #54]
  71 001a 7047     		bx	lr
  72              		.cfi_endproc
  73              	.LFE101:
  75              		.section	.text.IRDA_Transmit_IT,"ax",%progbits
  76              		.align	2
  77              		.thumb
  78              		.thumb_func
ARM GAS  /tmp/ccP46s5c.s 			page 34


  80              	IRDA_Transmit_IT:
  81              	.LFB107:
1808:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1809:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1810:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1811:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA communication abort callback, when initiated by HAL services on Error
1812:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
1813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
1814:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1815:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1816:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma)
1817:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1818:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1819:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1821:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1822:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_ErrorCallback(hirda);
1823:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1824:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1826:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA Tx communication abort callback, when initiated by user
1827:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
1828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
1829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         Abort still ongoing for Rx DMA Handle.
1830:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
1831:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1832:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1833:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
1834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1836:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->hdmatx->XferAbortCallback = NULL;
1838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1839:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check if an Abort process is still ongoing */
1840:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->hdmarx != NULL)
1841:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmarx->XferAbortCallback != NULL)
1843:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1844:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return;
1845:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1846:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1847:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1848:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
1849:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1851:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1852:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Reset ErrorCode */
1853:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1855:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->gState and hirda->RxState to Ready */
1856:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState  = HAL_IRDA_STATE_READY;
1857:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
1858:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Call user Abort complete callback */
1860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_AbortCpltCallback(hirda);
1861:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccP46s5c.s 			page 35


1863:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1864:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA Rx communication abort callback, when initiated by user
1865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
1866:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
1867:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         Abort still ongoing for Tx DMA Handle.
1868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
1869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1870:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1871:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
1872:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1873:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1874:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1875:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->hdmarx->XferAbortCallback = NULL;
1876:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1877:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check if an Abort process is still ongoing */
1878:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->hdmatx != NULL)
1879:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1880:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->hdmatx->XferAbortCallback != NULL)
1881:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return;
1883:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1884:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1885:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1886:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
1887:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1888:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1890:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Reset ErrorCode */
1891:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1892:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1893:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->gState and hirda->RxState to Ready */
1894:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState  = HAL_IRDA_STATE_READY;
1895:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
1896:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1897:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Call user Abort complete callback */
1898:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_AbortCpltCallback(hirda);
1899:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1900:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1901:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1902:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA Tx communication abort callback, when initiated by user by a call to
1903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         HAL_IRDA_AbortTransmit_IT API (Abort only Tx transfer)
1904:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
1905:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         and leads to user Tx Abort Complete callback execution).
1906:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
1907:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1908:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1909:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
1910:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1912:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1914:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1915:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->gState to Ready */
1916:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
1917:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1918:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Call user Abort complete callback */
1919:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_AbortTransmitCpltCallback(hirda);
ARM GAS  /tmp/ccP46s5c.s 			page 36


1920:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1921:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1922:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1923:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  DMA IRDA Rx communication abort callback, when initiated by user by a call to
1924:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         HAL_IRDA_AbortReceive_IT API (Abort only Rx transfer)
1925:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
1926:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *         and leads to user Rx Abort Complete callback execution).
1927:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hdma DMA handle.
1928:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
1929:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1930:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
1931:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1932:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1933:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1934:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1935:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1936:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Restore hirda->RxState to Ready */
1937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
1938:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1939:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Call user Abort complete callback */
1940:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_AbortReceiveCpltCallback(hirda);
1941:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
1942:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1943:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1944:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Send an amount of data in non blocking mode. 
1945:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: pointer to a IRDA_HandleTypeDef structure that contains
1946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1947:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1948:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1949:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda)
1950:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
  82              		.loc 1 1950 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87              	.LVL2:
1951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
1952:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
1953:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is ongoing */
1954:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_BUSY_TX)
  88              		.loc 1 1954 0
  89 0000 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
  90 0004 DBB2     		uxtb	r3, r3
  91 0006 212B     		cmp	r3, #33
  92 0008 2BD1     		bne	.L8
1955:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1956:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
  93              		.loc 1 1956 0
  94 000a 8368     		ldr	r3, [r0, #8]
  95 000c B3F5805F 		cmp	r3, #4096
  96 0010 0FD1     		bne	.L5
1957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1958:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       tmp = (uint16_t*) hirda->pTxBuffPtr;
  97              		.loc 1 1958 0
  98 0012 C369     		ldr	r3, [r0, #28]
  99              	.LVL3:
ARM GAS  /tmp/ccP46s5c.s 			page 37


1959:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 100              		.loc 1 1959 0
 101 0014 0268     		ldr	r2, [r0]
 102 0016 1B88     		ldrh	r3, [r3]
 103              	.LVL4:
 104 0018 C3F30803 		ubfx	r3, r3, #0, #9
 105 001c 5360     		str	r3, [r2, #4]
 106              	.LVL5:
1960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.Parity == IRDA_PARITY_NONE)
 107              		.loc 1 1960 0
 108 001e C368     		ldr	r3, [r0, #12]
 109 0020 1BB9     		cbnz	r3, .L6
1961:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1962:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->pTxBuffPtr += 2U;
 110              		.loc 1 1962 0
 111 0022 C369     		ldr	r3, [r0, #28]
 112 0024 0233     		adds	r3, r3, #2
 113 0026 C361     		str	r3, [r0, #28]
 114 0028 09E0     		b	.L7
 115              	.L6:
1963:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1964:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
1965:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
1966:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->pTxBuffPtr += 1U;
 116              		.loc 1 1966 0
 117 002a C369     		ldr	r3, [r0, #28]
 118 002c 0133     		adds	r3, r3, #1
 119 002e C361     		str	r3, [r0, #28]
 120 0030 05E0     		b	.L7
 121              	.L5:
1967:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
1968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     } 
1969:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     else
1970:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1971:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->Instance->DR = (uint8_t)(*hirda->pTxBuffPtr++ & (uint8_t)0x00FF);
 122              		.loc 1 1971 0
 123 0032 0268     		ldr	r2, [r0]
 124 0034 C369     		ldr	r3, [r0, #28]
 125 0036 591C     		adds	r1, r3, #1
 126 0038 C161     		str	r1, [r0, #28]
 127 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 128 003c 5360     		str	r3, [r2, #4]
 129              	.L7:
1972:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1974:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(--hirda->TxXferCount == 0U)
 130              		.loc 1 1974 0
 131 003e 438C     		ldrh	r3, [r0, #34]
 132 0040 9BB2     		uxth	r3, r3
 133 0042 013B     		subs	r3, r3, #1
 134 0044 9BB2     		uxth	r3, r3
 135 0046 4384     		strh	r3, [r0, #34]	@ movhi
 136 0048 6BB9     		cbnz	r3, .L9
1975:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
1976:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Disable the IRDA Transmit Data Register Empty Interrupt */
1977:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TXEIE);
 137              		.loc 1 1977 0
ARM GAS  /tmp/ccP46s5c.s 			page 38


 138 004a 0268     		ldr	r2, [r0]
 139 004c D368     		ldr	r3, [r2, #12]
 140 004e 23F08003 		bic	r3, r3, #128
 141 0052 D360     		str	r3, [r2, #12]
1978:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Enable the IRDA Transmit Complete Interrupt */
1980:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 142              		.loc 1 1980 0
 143 0054 0268     		ldr	r2, [r0]
 144 0056 D368     		ldr	r3, [r2, #12]
 145 0058 43F04003 		orr	r3, r3, #64
 146 005c D360     		str	r3, [r2, #12]
1981:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
1982:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
 147              		.loc 1 1982 0
 148 005e 0020     		movs	r0, #0
 149              	.LVL6:
 150 0060 7047     		bx	lr
 151              	.LVL7:
 152              	.L8:
1983:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1984:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
1985:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
1986:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
 153              		.loc 1 1986 0
 154 0062 0220     		movs	r0, #2
 155              	.LVL8:
 156 0064 7047     		bx	lr
 157              	.LVL9:
 158              	.L9:
1982:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 159              		.loc 1 1982 0
 160 0066 0020     		movs	r0, #0
 161              	.LVL10:
1987:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
1988:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 162              		.loc 1 1988 0
 163 0068 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE107:
 167 006a 00BF     		.section	.text.IRDA_SetConfig,"ax",%progbits
 168              		.align	2
 169              		.thumb
 170              		.thumb_func
 172              	IRDA_SetConfig:
 173              	.LFB110:
1989:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
1990:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
1991:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Wraps up transmission in non blocking mode.
1992:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: pointer to a IRDA_HandleTypeDef structure that contains
1993:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1994:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
1995:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
1996:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda)
1997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
1998:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA Transmit Complete Interrupt */    
1999:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
ARM GAS  /tmp/ccP46s5c.s 			page 39


2000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2001:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Tx process is ended, restore hirda->gState to Ready */
2002:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
2003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_TxCpltCallback(hirda);
2004:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2005:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return HAL_OK;
2006:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
2007:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
2008:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
2009:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Receives an amount of data in non blocking mode. 
2010:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
2011:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
2012:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval HAL status
2013:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
2014:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Receive_IT(IRDA_HandleTypeDef *hirda)
2015:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
2016:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
2017:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t  uhdata;
2018:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2019:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is ongoing */
2020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_BUSY_RX) 
2021:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
2022:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     uhdata = (uint16_t) READ_REG(hirda->Instance->DR);
2023:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
2024:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
2025:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       tmp = (uint16_t*) hirda->pRxBuffPtr;
2026:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.Parity == IRDA_PARITY_NONE)
2027:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
2028:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         *tmp = (uint16_t)(uhdata & (uint16_t)0x01FF);
2029:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->pRxBuffPtr += 2U;
2030:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
2031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
2032:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
2033:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         *tmp = (uint16_t)(uhdata & (uint16_t)0x00FF);
2034:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->pRxBuffPtr += 1U;
2035:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
2036:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
2037:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     else
2038:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
2039:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.Parity == IRDA_PARITY_NONE)
2040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
2041:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         *hirda->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)0x00FF);
2042:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
2043:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       else
2044:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
2045:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         *hirda->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)0x007F);
2046:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
2047:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
2048:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
2049:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(--hirda->RxXferCount == 0U)
2050:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
2051:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Disable the IRDA Data Register not empty Interrupt */
2052:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_RXNE);
2053:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
2054:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Disable the IRDA Parity Error Interrupt */
2055:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_PE);
2056:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       
ARM GAS  /tmp/ccP46s5c.s 			page 40


2057:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
2058:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       __HAL_IRDA_DISABLE_IT(hirda, IRDA_IT_ERR);
2059:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       
2060:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       /* Rx process is completed, restore hirda->RxState to Ready */
2061:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       hirda->RxState = HAL_IRDA_STATE_READY;
2062:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_IRDA_RxCpltCallback(hirda);
2063:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
2064:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return HAL_OK;
2065:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
2066:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_OK;
2067:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
2068:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
2069:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
2070:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return HAL_BUSY;
2071:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
2072:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
2073:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
2074:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** /**
2075:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @brief  Configures the IRDA peripheral. 
2076:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @param  hirda: Pointer to a IRDA_HandleTypeDef structure that contains
2077:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
2078:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   * @retval None
2079:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   */
2080:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
2081:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** {
 174              		.loc 1 2081 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              	.LVL11:
 179 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 180              	.LCFI0:
 181              		.cfi_def_cfa_offset 24
 182              		.cfi_offset 4, -24
 183              		.cfi_offset 5, -20
 184              		.cfi_offset 6, -16
 185              		.cfi_offset 7, -12
 186              		.cfi_offset 8, -8
 187              		.cfi_offset 14, -4
 188 0004 0546     		mov	r5, r0
2082:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the parameters */
2083:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
2084:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_BAUDRATE(hirda->Init.BaudRate));  
2085:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_WORD_LENGTH(hirda->Init.WordLength));
2086:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_PARITY(hirda->Init.Parity));
2087:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_MODE(hirda->Init.Mode));
2088:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));
2089:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****  
2090:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /*-------------------------- USART CR2 Configuration ------------------------*/
2091:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Clear STOP[13:12] bits */
2092:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR2, USART_CR2_STOP);
 189              		.loc 1 2092 0
 190 0006 0268     		ldr	r2, [r0]
 191 0008 1369     		ldr	r3, [r2, #16]
 192 000a 23F44053 		bic	r3, r3, #12288
 193 000e 1361     		str	r3, [r2, #16]
2093:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
ARM GAS  /tmp/ccP46s5c.s 			page 41


2094:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2095:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Clear M, PCE, PS, TE and RE bits */
2096:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART
 194              		.loc 1 2096 0
 195 0010 0268     		ldr	r2, [r0]
 196 0012 D368     		ldr	r3, [r2, #12]
 197 0014 23F4B053 		bic	r3, r3, #5632
 198 0018 23F00C03 		bic	r3, r3, #12
 199 001c D360     		str	r3, [r2, #12]
2097:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2098:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Configure the USART Word Length, Parity and mode: 
2099:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   Set the M bits according to hirda->Init.WordLength value 
2100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   Set PCE and PS bits according to hirda->Init.Parity value
2101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   Set TE and RE bits according to hirda->Init.Mode value */
2102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Write to USART CR1 */
2103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   SET_BIT(hirda->Instance->CR1, (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init
 200              		.loc 1 2103 0
 201 001e 0168     		ldr	r1, [r0]
 202 0020 C868     		ldr	r0, [r1, #12]
 203              	.LVL12:
 204 0022 AB68     		ldr	r3, [r5, #8]
 205 0024 EA68     		ldr	r2, [r5, #12]
 206 0026 1A43     		orrs	r2, r2, r3
 207 0028 2B69     		ldr	r3, [r5, #16]
 208 002a 1343     		orrs	r3, r3, r2
 209 002c 0343     		orrs	r3, r3, r0
 210 002e CB60     		str	r3, [r1, #12]
2104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Clear CTSE and RTSE bits */
2107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_RTSE | USART_CR3_CTSE);
 211              		.loc 1 2107 0
 212 0030 2A68     		ldr	r2, [r5]
 213 0032 5369     		ldr	r3, [r2, #20]
 214 0034 23F44073 		bic	r3, r3, #768
 215 0038 5361     		str	r3, [r2, #20]
2108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
2109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if(hirda->Instance == USART1)
 216              		.loc 1 2110 0
 217 003a 2A68     		ldr	r2, [r5]
 218 003c 594B     		ldr	r3, .L14
 219 003e 9A42     		cmp	r2, r3
 220 0040 57D1     		bne	.L11
2111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
2112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(HAL_RCC_GetPCLK2Freq(), hirda->Init.BaudRate));
 221              		.loc 1 2112 0
 222 0042 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 223              	.LVL13:
 224 0046 00EB8000 		add	r0, r0, r0, lsl #2
 225 004a 00EB8000 		add	r0, r0, r0, lsl #2
 226 004e 6C68     		ldr	r4, [r5, #4]
 227 0050 A400     		lsls	r4, r4, #2
 228 0052 B0FBF4F4 		udiv	r4, r0, r4
 229 0056 544E     		ldr	r6, .L14+4
 230 0058 A6FB0434 		umull	r3, r4, r6, r4
 231 005c 6409     		lsrs	r4, r4, #5
ARM GAS  /tmp/ccP46s5c.s 			page 42


 232 005e 2401     		lsls	r4, r4, #4
 233 0060 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 234              	.LVL14:
 235 0064 00EB8000 		add	r0, r0, r0, lsl #2
 236 0068 00EB8000 		add	r0, r0, r0, lsl #2
 237 006c 6B68     		ldr	r3, [r5, #4]
 238 006e 9B00     		lsls	r3, r3, #2
 239 0070 B0FBF3F7 		udiv	r7, r0, r3
 240 0074 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 241              	.LVL15:
 242 0078 00EB8000 		add	r0, r0, r0, lsl #2
 243 007c 00EB8000 		add	r0, r0, r0, lsl #2
 244 0080 6B68     		ldr	r3, [r5, #4]
 245 0082 9B00     		lsls	r3, r3, #2
 246 0084 B0FBF3F3 		udiv	r3, r0, r3
 247 0088 A6FB0323 		umull	r2, r3, r6, r3
 248 008c 5B09     		lsrs	r3, r3, #5
 249 008e 4FF06408 		mov	r8, #100
 250 0092 08FB1373 		mls	r3, r8, r3, r7
 251 0096 1B01     		lsls	r3, r3, #4
 252 0098 3233     		adds	r3, r3, #50
 253 009a A6FB0323 		umull	r2, r3, r6, r3
 254 009e 5B09     		lsrs	r3, r3, #5
 255 00a0 03F0F003 		and	r3, r3, #240
 256 00a4 1C44     		add	r4, r4, r3
 257 00a6 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 258              	.LVL16:
 259 00aa 00EB8000 		add	r0, r0, r0, lsl #2
 260 00ae 00EB8000 		add	r0, r0, r0, lsl #2
 261 00b2 6B68     		ldr	r3, [r5, #4]
 262 00b4 9B00     		lsls	r3, r3, #2
 263 00b6 B0FBF3F7 		udiv	r7, r0, r3
 264 00ba FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 265              	.LVL17:
 266 00be 00EB8000 		add	r0, r0, r0, lsl #2
 267 00c2 00EB8000 		add	r0, r0, r0, lsl #2
 268 00c6 6B68     		ldr	r3, [r5, #4]
 269 00c8 9B00     		lsls	r3, r3, #2
 270 00ca B0FBF3F3 		udiv	r3, r0, r3
 271 00ce A6FB0323 		umull	r2, r3, r6, r3
 272 00d2 5B09     		lsrs	r3, r3, #5
 273 00d4 08FB1373 		mls	r3, r8, r3, r7
 274 00d8 1B01     		lsls	r3, r3, #4
 275 00da 3233     		adds	r3, r3, #50
 276 00dc A6FB0323 		umull	r2, r3, r6, r3
 277 00e0 C3F34313 		ubfx	r3, r3, #5, #4
 278 00e4 1C44     		add	r4, r4, r3
 279 00e6 2A68     		ldr	r2, [r5]
 280 00e8 9368     		ldr	r3, [r2, #8]
 281 00ea 1C43     		orrs	r4, r4, r3
 282 00ec 9460     		str	r4, [r2, #8]
 283 00ee BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 284              	.LVL18:
 285              	.L11:
2113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
2114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   else
2115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
ARM GAS  /tmp/ccP46s5c.s 			page 43


2116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(HAL_RCC_GetPCLK1Freq(), hirda->Init.BaudRate));
 286              		.loc 1 2116 0
 287 00f2 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 288              	.LVL19:
 289 00f6 00EB8000 		add	r0, r0, r0, lsl #2
 290 00fa 00EB8000 		add	r0, r0, r0, lsl #2
 291 00fe 6C68     		ldr	r4, [r5, #4]
 292 0100 A400     		lsls	r4, r4, #2
 293 0102 B0FBF4F4 		udiv	r4, r0, r4
 294 0106 284E     		ldr	r6, .L14+4
 295 0108 A6FB0434 		umull	r3, r4, r6, r4
 296 010c 6409     		lsrs	r4, r4, #5
 297 010e 2401     		lsls	r4, r4, #4
 298 0110 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 299              	.LVL20:
 300 0114 00EB8000 		add	r0, r0, r0, lsl #2
 301 0118 00EB8000 		add	r0, r0, r0, lsl #2
 302 011c 6B68     		ldr	r3, [r5, #4]
 303 011e 9B00     		lsls	r3, r3, #2
 304 0120 B0FBF3F7 		udiv	r7, r0, r3
 305 0124 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 306              	.LVL21:
 307 0128 00EB8000 		add	r0, r0, r0, lsl #2
 308 012c 00EB8000 		add	r0, r0, r0, lsl #2
 309 0130 6B68     		ldr	r3, [r5, #4]
 310 0132 9B00     		lsls	r3, r3, #2
 311 0134 B0FBF3F3 		udiv	r3, r0, r3
 312 0138 A6FB0323 		umull	r2, r3, r6, r3
 313 013c 5B09     		lsrs	r3, r3, #5
 314 013e 4FF06408 		mov	r8, #100
 315 0142 08FB1373 		mls	r3, r8, r3, r7
 316 0146 1B01     		lsls	r3, r3, #4
 317 0148 3233     		adds	r3, r3, #50
 318 014a A6FB0323 		umull	r2, r3, r6, r3
 319 014e 5B09     		lsrs	r3, r3, #5
 320 0150 03F0F003 		and	r3, r3, #240
 321 0154 1C44     		add	r4, r4, r3
 322 0156 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 323              	.LVL22:
 324 015a 00EB8000 		add	r0, r0, r0, lsl #2
 325 015e 00EB8000 		add	r0, r0, r0, lsl #2
 326 0162 6B68     		ldr	r3, [r5, #4]
 327 0164 9B00     		lsls	r3, r3, #2
 328 0166 B0FBF3F7 		udiv	r7, r0, r3
 329 016a FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 330              	.LVL23:
 331 016e 00EB8000 		add	r0, r0, r0, lsl #2
 332 0172 00EB8000 		add	r0, r0, r0, lsl #2
 333 0176 6B68     		ldr	r3, [r5, #4]
 334 0178 9B00     		lsls	r3, r3, #2
 335 017a B0FBF3F3 		udiv	r3, r0, r3
 336 017e A6FB0323 		umull	r2, r3, r6, r3
 337 0182 5B09     		lsrs	r3, r3, #5
 338 0184 08FB1373 		mls	r3, r8, r3, r7
 339 0188 1B01     		lsls	r3, r3, #4
 340 018a 3233     		adds	r3, r3, #50
 341 018c A6FB0323 		umull	r2, r3, r6, r3
ARM GAS  /tmp/ccP46s5c.s 			page 44


 342 0190 C3F34313 		ubfx	r3, r3, #5, #4
 343 0194 1C44     		add	r4, r4, r3
 344 0196 2A68     		ldr	r2, [r5]
 345 0198 9368     		ldr	r3, [r2, #8]
 346 019a 1C43     		orrs	r4, r4, r3
 347 019c 9460     		str	r4, [r2, #8]
 348 019e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 349              	.LVL24:
 350              	.L15:
 351 01a2 00BF     		.align	2
 352              	.L14:
 353 01a4 00380140 		.word	1073821696
 354 01a8 1F85EB51 		.word	1374389535
 355              		.cfi_endproc
 356              	.LFE110:
 358              		.section	.text.IRDA_WaitOnFlagUntilTimeout,"ax",%progbits
 359              		.align	2
 360              		.thumb
 361              		.thumb_func
 363              	IRDA_WaitOnFlagUntilTimeout:
 364              	.LFB99:
1755:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Wait until flag is set */
 365              		.loc 1 1755 0
 366              		.cfi_startproc
 367              		@ args = 4, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              	.LVL25:
 370 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 371              	.LCFI1:
 372              		.cfi_def_cfa_offset 24
 373              		.cfi_offset 4, -24
 374              		.cfi_offset 5, -20
 375              		.cfi_offset 6, -16
 376              		.cfi_offset 7, -12
 377              		.cfi_offset 8, -8
 378              		.cfi_offset 14, -4
 379 0004 0546     		mov	r5, r0
 380 0006 0F46     		mov	r7, r1
 381 0008 1646     		mov	r6, r2
 382 000a 9846     		mov	r8, r3
 383 000c 069C     		ldr	r4, [sp, #24]
1757:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 384              		.loc 1 1757 0
 385 000e 1EE0     		b	.L18
 386              	.LVL26:
 387              	.L21:
1760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 388              		.loc 1 1760 0
 389 0010 B4F1FF3F 		cmp	r4, #-1
 390 0014 1BD0     		beq	.L18
1762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 391              		.loc 1 1762 0
 392 0016 2CB1     		cbz	r4, .L19
1762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 393              		.loc 1 1762 0 is_stmt 0 discriminator 1
 394 0018 FFF7FEFF 		bl	HAL_GetTick
 395              	.LVL27:
ARM GAS  /tmp/ccP46s5c.s 			page 45


 396 001c C8EB0000 		rsb	r0, r8, r0
 397 0020 8442     		cmp	r4, r0
 398 0022 14D2     		bcs	.L18
 399              	.L19:
1765:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 400              		.loc 1 1765 0 is_stmt 1
 401 0024 2A68     		ldr	r2, [r5]
 402 0026 D368     		ldr	r3, [r2, #12]
 403 0028 23F4D073 		bic	r3, r3, #416
 404 002c D360     		str	r3, [r2, #12]
1766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
 405              		.loc 1 1766 0
 406 002e 2A68     		ldr	r2, [r5]
 407 0030 5369     		ldr	r3, [r2, #20]
 408 0032 23F00103 		bic	r3, r3, #1
 409 0036 5361     		str	r3, [r2, #20]
1768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->RxState = HAL_IRDA_STATE_READY;
 410              		.loc 1 1768 0
 411 0038 2023     		movs	r3, #32
 412 003a 85F83530 		strb	r3, [r5, #53]
1769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
 413              		.loc 1 1769 0
 414 003e 85F83630 		strb	r3, [r5, #54]
1772:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         
 415              		.loc 1 1772 0
 416 0042 0023     		movs	r3, #0
 417 0044 85F83430 		strb	r3, [r5, #52]
1774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 418              		.loc 1 1774 0
 419 0048 0320     		movs	r0, #3
 420 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 421              	.LVL28:
 422              	.L18:
1757:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 423              		.loc 1 1757 0
 424 004e 2B68     		ldr	r3, [r5]
 425 0050 1B68     		ldr	r3, [r3]
 426 0052 37EA0303 		bics	r3, r7, r3
 427 0056 0CBF     		ite	eq
 428 0058 0123     		moveq	r3, #1
 429 005a 0023     		movne	r3, #0
 430 005c B342     		cmp	r3, r6
 431 005e D7D0     		beq	.L21
1778:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 432              		.loc 1 1778 0
 433 0060 0020     		movs	r0, #0
1779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 434              		.loc 1 1779 0
 435 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 436              		.cfi_endproc
 437              	.LFE99:
 439 0066 00BF     		.section	.text.HAL_IRDA_MspInit,"ax",%progbits
 440              		.align	2
 441              		.weak	HAL_IRDA_MspInit
 442              		.thumb
 443              		.thumb_func
 445              	HAL_IRDA_MspInit:
ARM GAS  /tmp/ccP46s5c.s 			page 46


 446              	.LFB66:
 339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 447              		.loc 1 339 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 452              	.LVL29:
 453 0000 7047     		bx	lr
 454              		.cfi_endproc
 455              	.LFE66:
 457 0002 00BF     		.section	.text.HAL_IRDA_Init,"ax",%progbits
 458              		.align	2
 459              		.global	HAL_IRDA_Init
 460              		.thumb
 461              		.thumb_func
 463              	HAL_IRDA_Init:
 464              	.LFB64:
 245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 465              		.loc 1 245 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              	.LVL30:
 247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 470              		.loc 1 247 0
 471 0000 0028     		cmp	r0, #0
 472 0002 40D0     		beq	.L27
 245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 473              		.loc 1 245 0
 474 0004 10B5     		push	{r4, lr}
 475              	.LCFI2:
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 4, -8
 478              		.cfi_offset 14, -4
 479 0006 0446     		mov	r4, r0
 255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 480              		.loc 1 255 0
 481 0008 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 482 000c 13F0FF0F 		tst	r3, #255
 483 0010 04D1     		bne	.L26
 258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 484              		.loc 1 258 0
 485 0012 0023     		movs	r3, #0
 486 0014 80F83430 		strb	r3, [r0, #52]
 260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 487              		.loc 1 260 0
 488 0018 FFF7FEFF 		bl	HAL_IRDA_MspInit
 489              	.LVL31:
 490              	.L26:
 263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 491              		.loc 1 263 0
 492 001c 2423     		movs	r3, #36
 493 001e 84F83530 		strb	r3, [r4, #53]
 266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 494              		.loc 1 266 0
 495 0022 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccP46s5c.s 			page 47


 496 0024 D368     		ldr	r3, [r2, #12]
 497 0026 23F40053 		bic	r3, r3, #8192
 498 002a D360     		str	r3, [r2, #12]
 269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 499              		.loc 1 269 0
 500 002c 2046     		mov	r0, r4
 501 002e FFF7FEFF 		bl	IRDA_SetConfig
 502              	.LVL32:
 274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 503              		.loc 1 274 0
 504 0032 2268     		ldr	r2, [r4]
 505 0034 1369     		ldr	r3, [r2, #16]
 506 0036 23F4F043 		bic	r3, r3, #30720
 507 003a 1361     		str	r3, [r2, #16]
 275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 508              		.loc 1 275 0
 509 003c 2268     		ldr	r2, [r4]
 510 003e 5369     		ldr	r3, [r2, #20]
 511 0040 23F02803 		bic	r3, r3, #40
 512 0044 5361     		str	r3, [r2, #20]
 278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 513              		.loc 1 278 0
 514 0046 2268     		ldr	r2, [r4]
 515 0048 D368     		ldr	r3, [r2, #12]
 516 004a 43F40053 		orr	r3, r3, #8192
 517 004e D360     		str	r3, [r2, #12]
 281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 518              		.loc 1 281 0
 519 0050 2268     		ldr	r2, [r4]
 520 0052 9369     		ldr	r3, [r2, #24]
 521 0054 23F0FF03 		bic	r3, r3, #255
 522 0058 217D     		ldrb	r1, [r4, #20]	@ zero_extendqisi2
 523 005a 0B43     		orrs	r3, r3, r1
 524 005c 9361     		str	r3, [r2, #24]
 284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 525              		.loc 1 284 0
 526 005e 2168     		ldr	r1, [r4]
 527 0060 4B69     		ldr	r3, [r1, #20]
 528 0062 23F00402 		bic	r2, r3, #4
 529 0066 A369     		ldr	r3, [r4, #24]
 530 0068 1343     		orrs	r3, r3, r2
 531 006a 4B61     		str	r3, [r1, #20]
 287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 532              		.loc 1 287 0
 533 006c 2268     		ldr	r2, [r4]
 534 006e 5369     		ldr	r3, [r2, #20]
 535 0070 43F00203 		orr	r3, r3, #2
 536 0074 5361     		str	r3, [r2, #20]
 290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState= HAL_IRDA_STATE_READY;
 537              		.loc 1 290 0
 538 0076 0020     		movs	r0, #0
 539 0078 A063     		str	r0, [r4, #56]
 291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState= HAL_IRDA_STATE_READY;
 540              		.loc 1 291 0
 541 007a 2023     		movs	r3, #32
 542 007c 84F83530 		strb	r3, [r4, #53]
 292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
ARM GAS  /tmp/ccP46s5c.s 			page 48


 543              		.loc 1 292 0
 544 0080 84F83630 		strb	r3, [r4, #54]
 294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 545              		.loc 1 294 0
 546 0084 10BD     		pop	{r4, pc}
 547              	.LVL33:
 548              	.L27:
 549              	.LCFI3:
 550              		.cfi_def_cfa_offset 0
 551              		.cfi_restore 4
 552              		.cfi_restore 14
 249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 553              		.loc 1 249 0
 554 0086 0120     		movs	r0, #1
 555              	.LVL34:
 556 0088 7047     		bx	lr
 557              		.cfi_endproc
 558              	.LFE64:
 560 008a 00BF     		.section	.text.HAL_IRDA_MspDeInit,"ax",%progbits
 561              		.align	2
 562              		.weak	HAL_IRDA_MspDeInit
 563              		.thumb
 564              		.thumb_func
 566              	HAL_IRDA_MspDeInit:
 567              	.LFB67:
 354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 568              		.loc 1 354 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 572              		@ link register save eliminated.
 573              	.LVL35:
 574 0000 7047     		bx	lr
 575              		.cfi_endproc
 576              	.LFE67:
 578 0002 00BF     		.section	.text.HAL_IRDA_DeInit,"ax",%progbits
 579              		.align	2
 580              		.global	HAL_IRDA_DeInit
 581              		.thumb
 582              		.thumb_func
 584              	HAL_IRDA_DeInit:
 585              	.LFB65:
 304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 586              		.loc 1 304 0
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 0
 589              		@ frame_needed = 0, uses_anonymous_args = 0
 590              	.LVL36:
 306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 591              		.loc 1 306 0
 592 0000 A0B1     		cbz	r0, .L33
 304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 593              		.loc 1 304 0
 594 0002 10B5     		push	{r4, lr}
 595              	.LCFI4:
 596              		.cfi_def_cfa_offset 8
 597              		.cfi_offset 4, -8
ARM GAS  /tmp/ccP46s5c.s 			page 49


 598              		.cfi_offset 14, -4
 599 0004 0446     		mov	r4, r0
 314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 600              		.loc 1 314 0
 601 0006 2423     		movs	r3, #36
 602 0008 80F83530 		strb	r3, [r0, #53]
 317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 603              		.loc 1 317 0
 604 000c 0268     		ldr	r2, [r0]
 605 000e D368     		ldr	r3, [r2, #12]
 606 0010 23F40053 		bic	r3, r3, #8192
 607 0014 D360     		str	r3, [r2, #12]
 320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 608              		.loc 1 320 0
 609 0016 FFF7FEFF 		bl	HAL_IRDA_MspDeInit
 610              	.LVL37:
 322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_RESET; 
 611              		.loc 1 322 0
 612 001a 0020     		movs	r0, #0
 613 001c A063     		str	r0, [r4, #56]
 323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_RESET;
 614              		.loc 1 323 0
 615 001e 84F83500 		strb	r0, [r4, #53]
 324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 616              		.loc 1 324 0
 617 0022 84F83600 		strb	r0, [r4, #54]
 327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 618              		.loc 1 327 0
 619 0026 84F83400 		strb	r0, [r4, #52]
 329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 620              		.loc 1 329 0
 621 002a 10BD     		pop	{r4, pc}
 622              	.LVL38:
 623              	.L33:
 624              	.LCFI5:
 625              		.cfi_def_cfa_offset 0
 626              		.cfi_restore 4
 627              		.cfi_restore 14
 308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 628              		.loc 1 308 0
 629 002c 0120     		movs	r0, #1
 630              	.LVL39:
 631 002e 7047     		bx	lr
 632              		.cfi_endproc
 633              	.LFE65:
 635              		.section	.text.HAL_IRDA_Transmit,"ax",%progbits
 636              		.align	2
 637              		.global	HAL_IRDA_Transmit
 638              		.thumb
 639              		.thumb_func
 641              	HAL_IRDA_Transmit:
 642              	.LFB68:
 432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
 643              		.loc 1 432 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 0
 646              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccP46s5c.s 			page 50


 647              	.LVL40:
 648 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 649              	.LCFI6:
 650              		.cfi_def_cfa_offset 24
 651              		.cfi_offset 4, -24
 652              		.cfi_offset 5, -20
 653              		.cfi_offset 6, -16
 654              		.cfi_offset 7, -12
 655              		.cfi_offset 8, -8
 656              		.cfi_offset 14, -4
 657 0004 82B0     		sub	sp, sp, #8
 658              	.LCFI7:
 659              		.cfi_def_cfa_offset 32
 660 0006 1E46     		mov	r6, r3
 661              	.LVL41:
 437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 662              		.loc 1 437 0
 663 0008 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 664              	.LVL42:
 665 000c DBB2     		uxtb	r3, r3
 666 000e 202B     		cmp	r3, #32
 667 0010 56D1     		bne	.L43
 668 0012 0446     		mov	r4, r0
 669 0014 0D46     		mov	r5, r1
 670 0016 9046     		mov	r8, r2
 439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 671              		.loc 1 439 0
 672 0018 0029     		cmp	r1, #0
 673 001a 53D0     		beq	.L44
 439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 674              		.loc 1 439 0 is_stmt 0 discriminator 1
 675 001c 002A     		cmp	r2, #0
 676 001e 53D0     		beq	.L45
 445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 677              		.loc 1 445 0 is_stmt 1
 678 0020 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 679 0024 012B     		cmp	r3, #1
 680 0026 51D0     		beq	.L46
 445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 681              		.loc 1 445 0 is_stmt 0 discriminator 2
 682 0028 0123     		movs	r3, #1
 683 002a 80F83430 		strb	r3, [r0, #52]
 447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 684              		.loc 1 447 0 is_stmt 1 discriminator 2
 685 002e 0023     		movs	r3, #0
 686 0030 8363     		str	r3, [r0, #56]
 448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 687              		.loc 1 448 0 discriminator 2
 688 0032 2123     		movs	r3, #33
 689 0034 80F83530 		strb	r3, [r0, #53]
 451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 690              		.loc 1 451 0 discriminator 2
 691 0038 FFF7FEFF 		bl	HAL_GetTick
 692              	.LVL43:
 693 003c 0746     		mov	r7, r0
 694              	.LVL44:
 453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
ARM GAS  /tmp/ccP46s5c.s 			page 51


 695              		.loc 1 453 0 discriminator 2
 696 003e A4F82080 		strh	r8, [r4, #32]	@ movhi
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     while(hirda->TxXferCount > 0U)
 697              		.loc 1 454 0 discriminator 2
 698 0042 A4F82280 		strh	r8, [r4, #34]	@ movhi
 455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 699              		.loc 1 455 0 discriminator 2
 700 0046 27E0     		b	.L38
 701              	.LVL45:
 702              	.L42:
 457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 703              		.loc 1 457 0
 704 0048 638C     		ldrh	r3, [r4, #34]
 705 004a 9BB2     		uxth	r3, r3
 706 004c 013B     		subs	r3, r3, #1
 707 004e 9BB2     		uxth	r3, r3
 708 0050 6384     		strh	r3, [r4, #34]	@ movhi
 458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 709              		.loc 1 458 0
 710 0052 A368     		ldr	r3, [r4, #8]
 711 0054 B3F5805F 		cmp	r3, #4096
 712 0058 12D1     		bne	.L39
 460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 713              		.loc 1 460 0
 714 005a 0096     		str	r6, [sp]
 715 005c 3B46     		mov	r3, r7
 716 005e 0022     		movs	r2, #0
 717 0060 8021     		movs	r1, #128
 718 0062 2046     		mov	r0, r4
 719 0064 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 720              	.LVL46:
 721 0068 90BB     		cbnz	r0, .L47
 722              	.LVL47:
 465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         if(hirda->Init.Parity == IRDA_PARITY_NONE)
 723              		.loc 1 465 0
 724 006a 2268     		ldr	r2, [r4]
 725 006c 2B88     		ldrh	r3, [r5]
 726 006e C3F30803 		ubfx	r3, r3, #0, #9
 727 0072 5360     		str	r3, [r2, #4]
 466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 728              		.loc 1 466 0
 729 0074 E368     		ldr	r3, [r4, #12]
 730 0076 0BB9     		cbnz	r3, .L40
 468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 731              		.loc 1 468 0
 732 0078 0235     		adds	r5, r5, #2
 733              	.LVL48:
 734 007a 0DE0     		b	.L38
 735              	.LVL49:
 736              	.L40:
 472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 737              		.loc 1 472 0
 738 007c 0135     		adds	r5, r5, #1
 739              	.LVL50:
 740 007e 0BE0     		b	.L38
 741              	.LVL51:
 742              	.L39:
ARM GAS  /tmp/ccP46s5c.s 			page 52


 477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 743              		.loc 1 477 0
 744 0080 0096     		str	r6, [sp]
 745 0082 3B46     		mov	r3, r7
 746 0084 0022     		movs	r2, #0
 747 0086 8021     		movs	r1, #128
 748 0088 2046     		mov	r0, r4
 749 008a FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 750              	.LVL52:
 751 008e 08BB     		cbnz	r0, .L48
 481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 752              		.loc 1 481 0
 753 0090 2368     		ldr	r3, [r4]
 754              	.LVL53:
 755 0092 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 756 0094 5A60     		str	r2, [r3, #4]
 757 0096 0135     		adds	r5, r5, #1
 758              	.LVL54:
 759              	.L38:
 455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 760              		.loc 1 455 0
 761 0098 638C     		ldrh	r3, [r4, #34]
 762 009a 9BB2     		uxth	r3, r3
 763 009c 002B     		cmp	r3, #0
 764 009e D3D1     		bne	.L42
 485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     { 
 765              		.loc 1 485 0
 766 00a0 0096     		str	r6, [sp]
 767 00a2 3B46     		mov	r3, r7
 768 00a4 0022     		movs	r2, #0
 769 00a6 4021     		movs	r1, #64
 770 00a8 2046     		mov	r0, r4
 771 00aa FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 772              	.LVL55:
 773 00ae 0346     		mov	r3, r0
 774 00b0 90B9     		cbnz	r0, .L49
 491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 775              		.loc 1 491 0
 776 00b2 2022     		movs	r2, #32
 777 00b4 84F83520 		strb	r2, [r4, #53]
 494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 778              		.loc 1 494 0
 779 00b8 0022     		movs	r2, #0
 780 00ba 84F83420 		strb	r2, [r4, #52]
 496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 781              		.loc 1 496 0
 782 00be 0CE0     		b	.L37
 783              	.LVL56:
 784              	.L43:
 500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 785              		.loc 1 500 0
 786 00c0 0223     		movs	r3, #2
 787 00c2 0AE0     		b	.L37
 788              	.L44:
 441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 789              		.loc 1 441 0
 790 00c4 0123     		movs	r3, #1
ARM GAS  /tmp/ccP46s5c.s 			page 53


 791 00c6 08E0     		b	.L37
 792              	.L45:
 793 00c8 0123     		movs	r3, #1
 794 00ca 06E0     		b	.L37
 795              	.L46:
 445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 796              		.loc 1 445 0
 797 00cc 0223     		movs	r3, #2
 798 00ce 04E0     		b	.L37
 799              	.LVL57:
 800              	.L47:
 462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 801              		.loc 1 462 0
 802 00d0 0323     		movs	r3, #3
 803 00d2 02E0     		b	.L37
 804              	.L48:
 479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 805              		.loc 1 479 0
 806 00d4 0323     		movs	r3, #3
 807 00d6 00E0     		b	.L37
 808              	.L49:
 487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 809              		.loc 1 487 0
 810 00d8 0323     		movs	r3, #3
 811              	.LVL58:
 812              	.L37:
 502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 813              		.loc 1 502 0
 814 00da 1846     		mov	r0, r3
 815 00dc 02B0     		add	sp, sp, #8
 816              	.LCFI8:
 817              		.cfi_def_cfa_offset 24
 818              		@ sp needed
 819 00de BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 820              		.cfi_endproc
 821              	.LFE68:
 823 00e2 00BF     		.section	.text.HAL_IRDA_Receive,"ax",%progbits
 824              		.align	2
 825              		.global	HAL_IRDA_Receive
 826              		.thumb
 827              		.thumb_func
 829              	HAL_IRDA_Receive:
 830              	.LFB69:
 514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
 831              		.loc 1 514 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              	.LVL59:
 836 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 837              	.LCFI9:
 838              		.cfi_def_cfa_offset 24
 839              		.cfi_offset 4, -24
 840              		.cfi_offset 5, -20
 841              		.cfi_offset 6, -16
 842              		.cfi_offset 7, -12
 843              		.cfi_offset 8, -8
ARM GAS  /tmp/ccP46s5c.s 			page 54


 844              		.cfi_offset 14, -4
 845 0004 82B0     		sub	sp, sp, #8
 846              	.LCFI10:
 847              		.cfi_def_cfa_offset 32
 848 0006 1E46     		mov	r6, r3
 849              	.LVL60:
 519:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 850              		.loc 1 519 0
 851 0008 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 852              	.LVL61:
 853 000c DBB2     		uxtb	r3, r3
 854 000e 202B     		cmp	r3, #32
 855 0010 5BD1     		bne	.L59
 856 0012 0446     		mov	r4, r0
 857 0014 0D46     		mov	r5, r1
 858 0016 9046     		mov	r8, r2
 521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 859              		.loc 1 521 0
 860 0018 0029     		cmp	r1, #0
 861 001a 58D0     		beq	.L60
 521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 862              		.loc 1 521 0 is_stmt 0 discriminator 1
 863 001c 002A     		cmp	r2, #0
 864 001e 58D0     		beq	.L61
 527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 865              		.loc 1 527 0 is_stmt 1
 866 0020 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 867 0024 012B     		cmp	r3, #1
 868 0026 56D0     		beq	.L62
 527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 869              		.loc 1 527 0 is_stmt 0 discriminator 2
 870 0028 0123     		movs	r3, #1
 871 002a 80F83430 		strb	r3, [r0, #52]
 529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 872              		.loc 1 529 0 is_stmt 1 discriminator 2
 873 002e 0023     		movs	r3, #0
 874 0030 8363     		str	r3, [r0, #56]
 530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 875              		.loc 1 530 0 discriminator 2
 876 0032 2223     		movs	r3, #34
 877 0034 80F83630 		strb	r3, [r0, #54]
 533:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 878              		.loc 1 533 0 discriminator 2
 879 0038 FFF7FEFF 		bl	HAL_GetTick
 880              	.LVL62:
 881 003c 0746     		mov	r7, r0
 882              	.LVL63:
 535:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = Size;
 883              		.loc 1 535 0 discriminator 2
 884 003e A4F82880 		strh	r8, [r4, #40]	@ movhi
 536:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 885              		.loc 1 536 0 discriminator 2
 886 0042 A4F82A80 		strh	r8, [r4, #42]	@ movhi
 539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 887              		.loc 1 539 0 discriminator 2
 888 0046 35E0     		b	.L53
 889              	.LVL64:
ARM GAS  /tmp/ccP46s5c.s 			page 55


 890              	.L58:
 541:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 891              		.loc 1 541 0
 892 0048 638D     		ldrh	r3, [r4, #42]
 893 004a 9BB2     		uxth	r3, r3
 894 004c 013B     		subs	r3, r3, #1
 895 004e 9BB2     		uxth	r3, r3
 896 0050 6385     		strh	r3, [r4, #42]	@ movhi
 542:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 897              		.loc 1 542 0
 898 0052 A368     		ldr	r3, [r4, #8]
 899 0054 B3F5805F 		cmp	r3, #4096
 900 0058 17D1     		bne	.L54
 544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 901              		.loc 1 544 0
 902 005a 0096     		str	r6, [sp]
 903 005c 3B46     		mov	r3, r7
 904 005e 0022     		movs	r2, #0
 905 0060 2021     		movs	r1, #32
 906 0062 2046     		mov	r0, r4
 907 0064 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 908              	.LVL65:
 909 0068 0028     		cmp	r0, #0
 910 006a 36D1     		bne	.L63
 911              	.LVL66:
 549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 912              		.loc 1 549 0
 913 006c E368     		ldr	r3, [r4, #12]
 914 006e 33B9     		cbnz	r3, .L55
 551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           pData +=2U;
 915              		.loc 1 551 0
 916 0070 2368     		ldr	r3, [r4]
 917 0072 5B68     		ldr	r3, [r3, #4]
 918 0074 C3F30803 		ubfx	r3, r3, #0, #9
 919 0078 25F8023B 		strh	r3, [r5], #2	@ movhi
 920              	.LVL67:
 921 007c 1AE0     		b	.L53
 922              	.LVL68:
 923              	.L55:
 556:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           pData +=1U;
 924              		.loc 1 556 0
 925 007e 2368     		ldr	r3, [r4]
 926 0080 5B68     		ldr	r3, [r3, #4]
 927 0082 DBB2     		uxtb	r3, r3
 928 0084 25F8013B 		strh	r3, [r5], #1	@ movhi
 929              	.LVL69:
 930 0088 14E0     		b	.L53
 931              	.LVL70:
 932              	.L54:
 562:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 933              		.loc 1 562 0
 934 008a 0096     		str	r6, [sp]
 935 008c 3B46     		mov	r3, r7
 936 008e 0022     		movs	r2, #0
 937 0090 2021     		movs	r1, #32
 938 0092 2046     		mov	r0, r4
 939 0094 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
ARM GAS  /tmp/ccP46s5c.s 			page 56


 940              	.LVL71:
 941 0098 08BB     		cbnz	r0, .L64
 566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 942              		.loc 1 566 0
 943 009a E368     		ldr	r3, [r4, #12]
 944 009c 23B9     		cbnz	r3, .L57
 945              	.LVL72:
 568:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 946              		.loc 1 568 0
 947 009e 2368     		ldr	r3, [r4]
 948 00a0 5B68     		ldr	r3, [r3, #4]
 949 00a2 2B70     		strb	r3, [r5]
 950 00a4 0135     		adds	r5, r5, #1
 951              	.LVL73:
 952 00a6 05E0     		b	.L53
 953              	.L57:
 954              	.LVL74:
 572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 955              		.loc 1 572 0
 956 00a8 2368     		ldr	r3, [r4]
 957 00aa 5B68     		ldr	r3, [r3, #4]
 958 00ac 03F07F03 		and	r3, r3, #127
 959 00b0 2B70     		strb	r3, [r5]
 960 00b2 0135     		adds	r5, r5, #1
 961              	.LVL75:
 962              	.L53:
 539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 963              		.loc 1 539 0
 964 00b4 638D     		ldrh	r3, [r4, #42]
 965 00b6 9BB2     		uxth	r3, r3
 966 00b8 002B     		cmp	r3, #0
 967 00ba C5D1     		bne	.L58
 578:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 968              		.loc 1 578 0
 969 00bc 2023     		movs	r3, #32
 970 00be 84F83630 		strb	r3, [r4, #54]
 581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 971              		.loc 1 581 0
 972 00c2 0020     		movs	r0, #0
 973 00c4 84F83400 		strb	r0, [r4, #52]
 583:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 974              		.loc 1 583 0
 975 00c8 0AE0     		b	.L52
 976              	.LVL76:
 977              	.L59:
 587:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 978              		.loc 1 587 0
 979 00ca 0220     		movs	r0, #2
 980              	.LVL77:
 981 00cc 08E0     		b	.L52
 982              	.LVL78:
 983              	.L60:
 523:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 984              		.loc 1 523 0
 985 00ce 0120     		movs	r0, #1
 986              	.LVL79:
 987 00d0 06E0     		b	.L52
ARM GAS  /tmp/ccP46s5c.s 			page 57


 988              	.LVL80:
 989              	.L61:
 990 00d2 0120     		movs	r0, #1
 991              	.LVL81:
 992 00d4 04E0     		b	.L52
 993              	.LVL82:
 994              	.L62:
 527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 995              		.loc 1 527 0
 996 00d6 0220     		movs	r0, #2
 997              	.LVL83:
 998 00d8 02E0     		b	.L52
 999              	.LVL84:
 1000              	.L63:
 546:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 1001              		.loc 1 546 0
 1002 00da 0320     		movs	r0, #3
 1003 00dc 00E0     		b	.L52
 1004              	.L64:
 564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 1005              		.loc 1 564 0
 1006 00de 0320     		movs	r0, #3
 1007              	.LVL85:
 1008              	.L52:
 589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1009              		.loc 1 589 0
 1010 00e0 02B0     		add	sp, sp, #8
 1011              	.LCFI11:
 1012              		.cfi_def_cfa_offset 24
 1013              		@ sp needed
 1014 00e2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1015              		.cfi_endproc
 1016              	.LFE69:
 1018              		.section	.text.HAL_IRDA_Transmit_IT,"ax",%progbits
 1019              		.align	2
 1020              		.global	HAL_IRDA_Transmit_IT
 1021              		.thumb
 1022              		.thumb_func
 1024              	HAL_IRDA_Transmit_IT:
 1025              	.LFB70:
 600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 1026              		.loc 1 600 0
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030              		@ link register save eliminated.
 1031              	.LVL86:
 602:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1032              		.loc 1 602 0
 1033 0000 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1034 0004 DBB2     		uxtb	r3, r3
 1035 0006 202B     		cmp	r3, #32
 1036 0008 16D1     		bne	.L68
 604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1037              		.loc 1 604 0
 1038 000a B9B1     		cbz	r1, .L69
 604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
ARM GAS  /tmp/ccP46s5c.s 			page 58


 1039              		.loc 1 604 0 is_stmt 0 discriminator 1
 1040 000c C2B1     		cbz	r2, .L70
 609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1041              		.loc 1 609 0 is_stmt 1
 1042 000e 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1043 0012 012B     		cmp	r3, #1
 1044 0014 16D0     		beq	.L71
 611:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 1045              		.loc 1 611 0 discriminator 2
 1046 0016 C161     		str	r1, [r0, #28]
 612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
 1047              		.loc 1 612 0 discriminator 2
 1048 0018 0284     		strh	r2, [r0, #32]	@ movhi
 613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1049              		.loc 1 613 0 discriminator 2
 1050 001a 4284     		strh	r2, [r0, #34]	@ movhi
 615:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 1051              		.loc 1 615 0 discriminator 2
 1052 001c 0023     		movs	r3, #0
 1053 001e 8363     		str	r3, [r0, #56]
 616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1054              		.loc 1 616 0 discriminator 2
 1055 0020 2122     		movs	r2, #33
 1056              	.LVL87:
 1057 0022 80F83520 		strb	r2, [r0, #53]
 619:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1058              		.loc 1 619 0 discriminator 2
 1059 0026 80F83430 		strb	r3, [r0, #52]
 622:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1060              		.loc 1 622 0 discriminator 2
 1061 002a 0168     		ldr	r1, [r0]
 1062              	.LVL88:
 1063 002c CA68     		ldr	r2, [r1, #12]
 1064 002e 42F08002 		orr	r2, r2, #128
 1065 0032 CA60     		str	r2, [r1, #12]
 1066              	.LVL89:
 624:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1067              		.loc 1 624 0 discriminator 2
 1068 0034 1846     		mov	r0, r3
 1069              	.LVL90:
 1070 0036 7047     		bx	lr
 1071              	.LVL91:
 1072              	.L68:
 628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1073              		.loc 1 628 0
 1074 0038 0220     		movs	r0, #2
 1075              	.LVL92:
 1076 003a 7047     		bx	lr
 1077              	.LVL93:
 1078              	.L69:
 606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1079              		.loc 1 606 0
 1080 003c 0120     		movs	r0, #1
 1081              	.LVL94:
 1082 003e 7047     		bx	lr
 1083              	.LVL95:
 1084              	.L70:
ARM GAS  /tmp/ccP46s5c.s 			page 59


 1085 0040 0120     		movs	r0, #1
 1086              	.LVL96:
 1087 0042 7047     		bx	lr
 1088              	.LVL97:
 1089              	.L71:
 609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1090              		.loc 1 609 0
 1091 0044 0220     		movs	r0, #2
 1092              	.LVL98:
 630:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1093              		.loc 1 630 0
 1094 0046 7047     		bx	lr
 1095              		.cfi_endproc
 1096              	.LFE70:
 1098              		.section	.text.HAL_IRDA_Receive_IT,"ax",%progbits
 1099              		.align	2
 1100              		.global	HAL_IRDA_Receive_IT
 1101              		.thumb
 1102              		.thumb_func
 1104              	HAL_IRDA_Receive_IT:
 1105              	.LFB71:
 641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 1106              		.loc 1 641 0
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 0
 1109              		@ frame_needed = 0, uses_anonymous_args = 0
 1110              		@ link register save eliminated.
 1111              	.LVL99:
 643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1112              		.loc 1 643 0
 1113 0000 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 1114 0004 DBB2     		uxtb	r3, r3
 1115 0006 202B     		cmp	r3, #32
 1116 0008 20D1     		bne	.L74
 645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1117              		.loc 1 645 0
 1118 000a 09B3     		cbz	r1, .L75
 645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1119              		.loc 1 645 0 is_stmt 0 discriminator 1
 1120 000c 12B3     		cbz	r2, .L76
 651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1121              		.loc 1 651 0 is_stmt 1
 1122 000e 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1123 0012 012B     		cmp	r3, #1
 1124 0014 20D0     		beq	.L77
 653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 1125              		.loc 1 653 0 discriminator 2
 1126 0016 4162     		str	r1, [r0, #36]
 654:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = Size;
 1127              		.loc 1 654 0 discriminator 2
 1128 0018 0285     		strh	r2, [r0, #40]	@ movhi
 655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1129              		.loc 1 655 0 discriminator 2
 1130 001a 4285     		strh	r2, [r0, #42]	@ movhi
 657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1131              		.loc 1 657 0 discriminator 2
 1132 001c 0023     		movs	r3, #0
ARM GAS  /tmp/ccP46s5c.s 			page 60


 1133 001e 8363     		str	r3, [r0, #56]
 658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1134              		.loc 1 658 0 discriminator 2
 1135 0020 2222     		movs	r2, #34
 1136              	.LVL100:
 1137 0022 80F83620 		strb	r2, [r0, #54]
 661:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1138              		.loc 1 661 0 discriminator 2
 1139 0026 80F83430 		strb	r3, [r0, #52]
 664:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1140              		.loc 1 664 0 discriminator 2
 1141 002a 0168     		ldr	r1, [r0]
 1142              	.LVL101:
 1143 002c CA68     		ldr	r2, [r1, #12]
 1144 002e 42F48072 		orr	r2, r2, #256
 1145 0032 CA60     		str	r2, [r1, #12]
 1146              	.LVL102:
 667:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1147              		.loc 1 667 0 discriminator 2
 1148 0034 0168     		ldr	r1, [r0]
 1149 0036 4A69     		ldr	r2, [r1, #20]
 1150 0038 42F00102 		orr	r2, r2, #1
 1151 003c 4A61     		str	r2, [r1, #20]
 670:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1152              		.loc 1 670 0 discriminator 2
 1153 003e 0168     		ldr	r1, [r0]
 1154 0040 CA68     		ldr	r2, [r1, #12]
 1155 0042 42F02002 		orr	r2, r2, #32
 1156 0046 CA60     		str	r2, [r1, #12]
 672:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1157              		.loc 1 672 0 discriminator 2
 1158 0048 1846     		mov	r0, r3
 1159              	.LVL103:
 1160 004a 7047     		bx	lr
 1161              	.LVL104:
 1162              	.L74:
 676:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1163              		.loc 1 676 0
 1164 004c 0220     		movs	r0, #2
 1165              	.LVL105:
 1166 004e 7047     		bx	lr
 1167              	.LVL106:
 1168              	.L75:
 647:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1169              		.loc 1 647 0
 1170 0050 0120     		movs	r0, #1
 1171              	.LVL107:
 1172 0052 7047     		bx	lr
 1173              	.LVL108:
 1174              	.L76:
 1175 0054 0120     		movs	r0, #1
 1176              	.LVL109:
 1177 0056 7047     		bx	lr
 1178              	.LVL110:
 1179              	.L77:
 651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1180              		.loc 1 651 0
ARM GAS  /tmp/ccP46s5c.s 			page 61


 1181 0058 0220     		movs	r0, #2
 1182              	.LVL111:
 678:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1183              		.loc 1 678 0
 1184 005a 7047     		bx	lr
 1185              		.cfi_endproc
 1186              	.LFE71:
 1188              		.section	.text.HAL_IRDA_Transmit_DMA,"ax",%progbits
 1189              		.align	2
 1190              		.global	HAL_IRDA_Transmit_DMA
 1191              		.thumb
 1192              		.thumb_func
 1194              	HAL_IRDA_Transmit_DMA:
 1195              	.LFB72:
 689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 1196              		.loc 1 689 0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 0
 1199              		@ frame_needed = 0, uses_anonymous_args = 0
 1200              	.LVL112:
 1201 0000 38B5     		push	{r3, r4, r5, lr}
 1202              	.LCFI12:
 1203              		.cfi_def_cfa_offset 16
 1204              		.cfi_offset 3, -16
 1205              		.cfi_offset 4, -12
 1206              		.cfi_offset 5, -8
 1207              		.cfi_offset 14, -4
 693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1208              		.loc 1 693 0
 1209 0002 90F83540 		ldrb	r4, [r0, #53]	@ zero_extendqisi2
 1210 0006 E4B2     		uxtb	r4, r4
 1211 0008 202C     		cmp	r4, #32
 1212 000a 31D1     		bne	.L80
 695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1213              		.loc 1 695 0
 1214 000c 0029     		cmp	r1, #0
 1215 000e 31D0     		beq	.L81
 695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1216              		.loc 1 695 0 is_stmt 0 discriminator 1
 1217 0010 002A     		cmp	r2, #0
 1218 0012 31D0     		beq	.L82
 701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1219              		.loc 1 701 0 is_stmt 1
 1220 0014 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1221 0018 012B     		cmp	r3, #1
 1222 001a 2FD0     		beq	.L83
 1223 001c 1346     		mov	r3, r2
 1224 001e 0446     		mov	r4, r0
 701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1225              		.loc 1 701 0 is_stmt 0 discriminator 2
 1226 0020 0122     		movs	r2, #1
 1227              	.LVL113:
 1228 0022 80F83420 		strb	r2, [r0, #52]
 703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferSize = Size;
 1229              		.loc 1 703 0 is_stmt 1 discriminator 2
 1230 0026 C161     		str	r1, [r0, #28]
 704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->TxXferCount = Size;
ARM GAS  /tmp/ccP46s5c.s 			page 62


 1231              		.loc 1 704 0 discriminator 2
 1232 0028 0384     		strh	r3, [r0, #32]	@ movhi
 705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1233              		.loc 1 705 0 discriminator 2
 1234 002a 4384     		strh	r3, [r0, #34]	@ movhi
 707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 1235              		.loc 1 707 0 discriminator 2
 1236 002c 0025     		movs	r5, #0
 1237 002e 8563     		str	r5, [r0, #56]
 708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1238              		.loc 1 708 0 discriminator 2
 1239 0030 2122     		movs	r2, #33
 1240 0032 80F83520 		strb	r2, [r0, #53]
 711:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1241              		.loc 1 711 0 discriminator 2
 1242 0036 C26A     		ldr	r2, [r0, #44]
 1243 0038 1148     		ldr	r0, .L85
 1244              	.LVL114:
 1245 003a 9062     		str	r0, [r2, #40]
 714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1246              		.loc 1 714 0 discriminator 2
 1247 003c E26A     		ldr	r2, [r4, #44]
 1248 003e 1148     		ldr	r0, .L85+4
 1249 0040 D062     		str	r0, [r2, #44]
 717:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1250              		.loc 1 717 0 discriminator 2
 1251 0042 E26A     		ldr	r2, [r4, #44]
 1252 0044 1048     		ldr	r0, .L85+8
 1253 0046 1063     		str	r0, [r2, #48]
 720:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1254              		.loc 1 720 0 discriminator 2
 1255 0048 E26A     		ldr	r2, [r4, #44]
 1256 004a 5563     		str	r5, [r2, #52]
 1257              	.LVL115:
 724:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1258              		.loc 1 724 0 discriminator 2
 1259 004c 2268     		ldr	r2, [r4]
 1260 004e 0432     		adds	r2, r2, #4
 1261 0050 E06A     		ldr	r0, [r4, #44]
 1262 0052 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1263              	.LVL116:
 727:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1264              		.loc 1 727 0 discriminator 2
 1265 0056 2368     		ldr	r3, [r4]
 1266 0058 6FF04002 		mvn	r2, #64
 1267 005c 1A60     		str	r2, [r3]
 730:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1268              		.loc 1 730 0 discriminator 2
 1269 005e 84F83450 		strb	r5, [r4, #52]
 734:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1270              		.loc 1 734 0 discriminator 2
 1271 0062 2268     		ldr	r2, [r4]
 1272 0064 5369     		ldr	r3, [r2, #20]
 1273 0066 43F08003 		orr	r3, r3, #128
 1274 006a 5361     		str	r3, [r2, #20]
 736:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1275              		.loc 1 736 0 discriminator 2
ARM GAS  /tmp/ccP46s5c.s 			page 63


 1276 006c 2846     		mov	r0, r5
 1277 006e 38BD     		pop	{r3, r4, r5, pc}
 1278              	.LVL117:
 1279              	.L80:
 740:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1280              		.loc 1 740 0
 1281 0070 0220     		movs	r0, #2
 1282              	.LVL118:
 1283 0072 38BD     		pop	{r3, r4, r5, pc}
 1284              	.LVL119:
 1285              	.L81:
 697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1286              		.loc 1 697 0
 1287 0074 0120     		movs	r0, #1
 1288              	.LVL120:
 1289 0076 38BD     		pop	{r3, r4, r5, pc}
 1290              	.LVL121:
 1291              	.L82:
 1292 0078 0120     		movs	r0, #1
 1293              	.LVL122:
 1294 007a 38BD     		pop	{r3, r4, r5, pc}
 1295              	.LVL123:
 1296              	.L83:
 701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1297              		.loc 1 701 0
 1298 007c 0220     		movs	r0, #2
 1299              	.LVL124:
 742:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1300              		.loc 1 742 0
 1301 007e 38BD     		pop	{r3, r4, r5, pc}
 1302              	.L86:
 1303              		.align	2
 1304              	.L85:
 1305 0080 00000000 		.word	IRDA_DMATransmitCplt
 1306 0084 00000000 		.word	IRDA_DMATransmitHalfCplt
 1307 0088 00000000 		.word	IRDA_DMAError
 1308              		.cfi_endproc
 1309              	.LFE72:
 1311              		.section	.text.HAL_IRDA_Receive_DMA,"ax",%progbits
 1312              		.align	2
 1313              		.global	HAL_IRDA_Receive_DMA
 1314              		.thumb
 1315              		.thumb_func
 1317              	HAL_IRDA_Receive_DMA:
 1318              	.LFB73:
 754:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t *tmp;
 1319              		.loc 1 754 0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 8
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323              	.LVL125:
 1324 0000 30B5     		push	{r4, r5, lr}
 1325              	.LCFI13:
 1326              		.cfi_def_cfa_offset 12
 1327              		.cfi_offset 4, -12
 1328              		.cfi_offset 5, -8
 1329              		.cfi_offset 14, -4
ARM GAS  /tmp/ccP46s5c.s 			page 64


 1330 0002 83B0     		sub	sp, sp, #12
 1331              	.LCFI14:
 1332              		.cfi_def_cfa_offset 24
 758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1333              		.loc 1 758 0
 1334 0004 90F83640 		ldrb	r4, [r0, #54]	@ zero_extendqisi2
 1335 0008 E4B2     		uxtb	r4, r4
 1336 000a 202C     		cmp	r4, #32
 1337 000c 3DD1     		bne	.L89
 760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1338              		.loc 1 760 0
 1339 000e 0029     		cmp	r1, #0
 1340 0010 3DD0     		beq	.L90
 760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1341              		.loc 1 760 0 is_stmt 0 discriminator 1
 1342 0012 002A     		cmp	r2, #0
 1343 0014 3DD0     		beq	.L91
 766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1344              		.loc 1 766 0 is_stmt 1
 1345 0016 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1346 001a 012B     		cmp	r3, #1
 1347 001c 3BD0     		beq	.L92
 1348 001e 1346     		mov	r3, r2
 1349 0020 0A46     		mov	r2, r1
 1350              	.LVL126:
 1351 0022 0446     		mov	r4, r0
 766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1352              		.loc 1 766 0 is_stmt 0 discriminator 2
 1353 0024 0121     		movs	r1, #1
 1354              	.LVL127:
 1355 0026 80F83410 		strb	r1, [r0, #52]
 768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferSize = Size;
 1356              		.loc 1 768 0 is_stmt 1 discriminator 2
 1357 002a 4262     		str	r2, [r0, #36]
 769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1358              		.loc 1 769 0 discriminator 2
 1359 002c 0385     		strh	r3, [r0, #40]	@ movhi
 771:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1360              		.loc 1 771 0 discriminator 2
 1361 002e 0025     		movs	r5, #0
 1362 0030 8563     		str	r5, [r0, #56]
 772:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1363              		.loc 1 772 0 discriminator 2
 1364 0032 2221     		movs	r1, #34
 1365 0034 80F83610 		strb	r1, [r0, #54]
 775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1366              		.loc 1 775 0 discriminator 2
 1367 0038 016B     		ldr	r1, [r0, #48]
 1368 003a 1848     		ldr	r0, .L94
 1369              	.LVL128:
 1370 003c 8862     		str	r0, [r1, #40]
 778:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1371              		.loc 1 778 0 discriminator 2
 1372 003e 216B     		ldr	r1, [r4, #48]
 1373 0040 1748     		ldr	r0, .L94+4
 1374 0042 C862     		str	r0, [r1, #44]
 781:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccP46s5c.s 			page 65


 1375              		.loc 1 781 0 discriminator 2
 1376 0044 216B     		ldr	r1, [r4, #48]
 1377 0046 1748     		ldr	r0, .L94+8
 1378 0048 0863     		str	r0, [r1, #48]
 784:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1379              		.loc 1 784 0 discriminator 2
 1380 004a 216B     		ldr	r1, [r4, #48]
 1381 004c 4D63     		str	r5, [r1, #52]
 1382              	.LVL129:
 788:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1383              		.loc 1 788 0 discriminator 2
 1384 004e 2168     		ldr	r1, [r4]
 1385 0050 0431     		adds	r1, r1, #4
 1386 0052 206B     		ldr	r0, [r4, #48]
 1387 0054 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1388              	.LVL130:
 1389              	.LBB2:
 791:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1390              		.loc 1 791 0 discriminator 2
 1391 0058 0195     		str	r5, [sp, #4]
 1392 005a 2368     		ldr	r3, [r4]
 1393 005c 1A68     		ldr	r2, [r3]
 1394 005e 0192     		str	r2, [sp, #4]
 1395 0060 5A68     		ldr	r2, [r3, #4]
 1396 0062 0192     		str	r2, [sp, #4]
 1397 0064 019A     		ldr	r2, [sp, #4]
 1398              	.LBE2:
 794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1399              		.loc 1 794 0 discriminator 2
 1400 0066 84F83450 		strb	r5, [r4, #52]
 797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1401              		.loc 1 797 0 discriminator 2
 1402 006a DA68     		ldr	r2, [r3, #12]
 1403 006c 42F48072 		orr	r2, r2, #256
 1404 0070 DA60     		str	r2, [r3, #12]
 800:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1405              		.loc 1 800 0 discriminator 2
 1406 0072 2268     		ldr	r2, [r4]
 1407 0074 5369     		ldr	r3, [r2, #20]
 1408 0076 43F00103 		orr	r3, r3, #1
 1409 007a 5361     		str	r3, [r2, #20]
 804:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1410              		.loc 1 804 0 discriminator 2
 1411 007c 2268     		ldr	r2, [r4]
 1412 007e 5369     		ldr	r3, [r2, #20]
 1413 0080 43F04003 		orr	r3, r3, #64
 1414 0084 5361     		str	r3, [r2, #20]
 806:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1415              		.loc 1 806 0 discriminator 2
 1416 0086 2846     		mov	r0, r5
 1417 0088 06E0     		b	.L88
 1418              	.LVL131:
 1419              	.L89:
 810:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1420              		.loc 1 810 0
 1421 008a 0220     		movs	r0, #2
 1422              	.LVL132:
ARM GAS  /tmp/ccP46s5c.s 			page 66


 1423 008c 04E0     		b	.L88
 1424              	.LVL133:
 1425              	.L90:
 762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1426              		.loc 1 762 0
 1427 008e 0120     		movs	r0, #1
 1428              	.LVL134:
 1429 0090 02E0     		b	.L88
 1430              	.LVL135:
 1431              	.L91:
 1432 0092 0120     		movs	r0, #1
 1433              	.LVL136:
 1434 0094 00E0     		b	.L88
 1435              	.LVL137:
 1436              	.L92:
 766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1437              		.loc 1 766 0
 1438 0096 0220     		movs	r0, #2
 1439              	.LVL138:
 1440              	.L88:
 812:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1441              		.loc 1 812 0
 1442 0098 03B0     		add	sp, sp, #12
 1443              	.LCFI15:
 1444              		.cfi_def_cfa_offset 12
 1445              		@ sp needed
 1446 009a 30BD     		pop	{r4, r5, pc}
 1447              	.L95:
 1448              		.align	2
 1449              	.L94:
 1450 009c 00000000 		.word	IRDA_DMAReceiveCplt
 1451 00a0 00000000 		.word	IRDA_DMAReceiveHalfCplt
 1452 00a4 00000000 		.word	IRDA_DMAError
 1453              		.cfi_endproc
 1454              	.LFE73:
 1456              		.section	.text.HAL_IRDA_DMAPause,"ax",%progbits
 1457              		.align	2
 1458              		.global	HAL_IRDA_DMAPause
 1459              		.thumb
 1460              		.thumb_func
 1462              	HAL_IRDA_DMAPause:
 1463              	.LFB74:
 821:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 1464              		.loc 1 821 0
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 0
 1467              		@ frame_needed = 0, uses_anonymous_args = 0
 1468              		@ link register save eliminated.
 1469              	.LVL139:
 825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1470              		.loc 1 825 0
 1471 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1472 0004 012B     		cmp	r3, #1
 1473 0006 2DD0     		beq	.L100
 825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1474              		.loc 1 825 0 is_stmt 0 discriminator 2
 1475 0008 0123     		movs	r3, #1
ARM GAS  /tmp/ccP46s5c.s 			page 67


 1476 000a 80F83430 		strb	r3, [r0, #52]
 827:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 1477              		.loc 1 827 0 is_stmt 1 discriminator 2
 1478 000e 0168     		ldr	r1, [r0]
 1479 0010 4B69     		ldr	r3, [r1, #20]
 1480 0012 03F08002 		and	r2, r3, #128
 1481              	.LVL140:
 828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1482              		.loc 1 828 0 discriminator 2
 1483 0016 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1484 001a DBB2     		uxtb	r3, r3
 1485 001c 212B     		cmp	r3, #33
 1486 001e 04D1     		bne	.L98
 828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1487              		.loc 1 828 0 is_stmt 0 discriminator 1
 1488 0020 1AB1     		cbz	r2, .L98
 831:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1489              		.loc 1 831 0 is_stmt 1
 1490 0022 4B69     		ldr	r3, [r1, #20]
 1491 0024 23F08003 		bic	r3, r3, #128
 1492 0028 4B61     		str	r3, [r1, #20]
 1493              	.L98:
 834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 1494              		.loc 1 834 0
 1495 002a 0168     		ldr	r1, [r0]
 1496 002c 4B69     		ldr	r3, [r1, #20]
 1497 002e 03F04002 		and	r2, r3, #64
 1498              	.LVL141:
 835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1499              		.loc 1 835 0
 1500 0032 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 1501 0036 DBB2     		uxtb	r3, r3
 1502 0038 222B     		cmp	r3, #34
 1503 003a 0ED1     		bne	.L99
 835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1504              		.loc 1 835 0 is_stmt 0 discriminator 1
 1505 003c 6AB1     		cbz	r2, .L99
 838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1506              		.loc 1 838 0 is_stmt 1
 1507 003e CB68     		ldr	r3, [r1, #12]
 1508 0040 23F48073 		bic	r3, r3, #256
 1509 0044 CB60     		str	r3, [r1, #12]
 839:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1510              		.loc 1 839 0
 1511 0046 0268     		ldr	r2, [r0]
 1512              	.LVL142:
 1513 0048 5369     		ldr	r3, [r2, #20]
 1514 004a 23F00103 		bic	r3, r3, #1
 1515 004e 5361     		str	r3, [r2, #20]
 842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1516              		.loc 1 842 0
 1517 0050 0268     		ldr	r2, [r0]
 1518 0052 5369     		ldr	r3, [r2, #20]
 1519 0054 23F04003 		bic	r3, r3, #64
 1520 0058 5361     		str	r3, [r2, #20]
 1521              	.L99:
 846:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
ARM GAS  /tmp/ccP46s5c.s 			page 68


 1522              		.loc 1 846 0
 1523 005a 0023     		movs	r3, #0
 1524 005c 80F83430 		strb	r3, [r0, #52]
 848:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 1525              		.loc 1 848 0
 1526 0060 1846     		mov	r0, r3
 1527              	.LVL143:
 1528 0062 7047     		bx	lr
 1529              	.LVL144:
 1530              	.L100:
 825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1531              		.loc 1 825 0
 1532 0064 0220     		movs	r0, #2
 1533              	.LVL145:
 849:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1534              		.loc 1 849 0
 1535 0066 7047     		bx	lr
 1536              		.cfi_endproc
 1537              	.LFE74:
 1539              		.section	.text.HAL_IRDA_DMAResume,"ax",%progbits
 1540              		.align	2
 1541              		.global	HAL_IRDA_DMAResume
 1542              		.thumb
 1543              		.thumb_func
 1545              	HAL_IRDA_DMAResume:
 1546              	.LFB75:
 858:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Process Locked */
 1547              		.loc 1 858 0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 8
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 1551              		@ link register save eliminated.
 1552              	.LVL146:
 860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1553              		.loc 1 860 0
 1554 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1555 0004 012B     		cmp	r3, #1
 1556 0006 2DD0     		beq	.L105
 860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1557              		.loc 1 860 0 is_stmt 0 discriminator 2
 1558 0008 0123     		movs	r3, #1
 1559 000a 80F83430 		strb	r3, [r0, #52]
 862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1560              		.loc 1 862 0 is_stmt 1 discriminator 2
 1561 000e 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1562 0012 DBB2     		uxtb	r3, r3
 1563 0014 212B     		cmp	r3, #33
 1564 0016 04D1     		bne	.L103
 865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1565              		.loc 1 865 0
 1566 0018 0268     		ldr	r2, [r0]
 1567 001a 5369     		ldr	r3, [r2, #20]
 1568 001c 43F08003 		orr	r3, r3, #128
 1569 0020 5361     		str	r3, [r2, #20]
 1570              	.L103:
 868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1571              		.loc 1 868 0
ARM GAS  /tmp/ccP46s5c.s 			page 69


 1572 0022 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 1573 0026 DBB2     		uxtb	r3, r3
 1574 0028 222B     		cmp	r3, #34
 1575 002a 1FD1     		bne	.L107
 858:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Process Locked */
 1576              		.loc 1 858 0
 1577 002c 82B0     		sub	sp, sp, #8
 1578              	.LCFI16:
 1579              		.cfi_def_cfa_offset 8
 1580              	.LBB3:
 871:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1581              		.loc 1 871 0
 1582 002e 0023     		movs	r3, #0
 1583 0030 0193     		str	r3, [sp, #4]
 1584 0032 0368     		ldr	r3, [r0]
 1585 0034 1A68     		ldr	r2, [r3]
 1586 0036 0192     		str	r2, [sp, #4]
 1587 0038 5A68     		ldr	r2, [r3, #4]
 1588 003a 0192     		str	r2, [sp, #4]
 1589 003c 019A     		ldr	r2, [sp, #4]
 1590              	.LBE3:
 874:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1591              		.loc 1 874 0
 1592 003e DA68     		ldr	r2, [r3, #12]
 1593 0040 42F48072 		orr	r2, r2, #256
 1594 0044 DA60     		str	r2, [r3, #12]
 875:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1595              		.loc 1 875 0
 1596 0046 0268     		ldr	r2, [r0]
 1597 0048 5369     		ldr	r3, [r2, #20]
 1598 004a 43F00103 		orr	r3, r3, #1
 1599 004e 5361     		str	r3, [r2, #20]
 878:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1600              		.loc 1 878 0
 1601 0050 0268     		ldr	r2, [r0]
 1602 0052 5369     		ldr	r3, [r2, #20]
 1603 0054 43F04003 		orr	r3, r3, #64
 1604 0058 5361     		str	r3, [r2, #20]
 882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1605              		.loc 1 882 0
 1606 005a 0023     		movs	r3, #0
 1607 005c 80F83430 		strb	r3, [r0, #52]
 884:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 1608              		.loc 1 884 0
 1609 0060 1846     		mov	r0, r3
 1610              	.LVL147:
 1611 0062 01E0     		b	.L102
 1612              	.LVL148:
 1613              	.L105:
 1614              	.LCFI17:
 1615              		.cfi_def_cfa_offset 0
 860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1616              		.loc 1 860 0
 1617 0064 0220     		movs	r0, #2
 1618              	.LVL149:
 1619 0066 7047     		bx	lr
 1620              	.L102:
ARM GAS  /tmp/ccP46s5c.s 			page 70


 1621              	.LCFI18:
 1622              		.cfi_def_cfa_offset 8
 885:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1623              		.loc 1 885 0
 1624 0068 02B0     		add	sp, sp, #8
 1625              	.LCFI19:
 1626              		.cfi_def_cfa_offset 0
 1627              		@ sp needed
 1628 006a 7047     		bx	lr
 1629              	.LVL150:
 1630              	.L107:
 882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1631              		.loc 1 882 0
 1632 006c 0023     		movs	r3, #0
 1633 006e 80F83430 		strb	r3, [r0, #52]
 884:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 1634              		.loc 1 884 0
 1635 0072 1846     		mov	r0, r3
 1636              	.LVL151:
 885:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1637              		.loc 1 885 0
 1638 0074 7047     		bx	lr
 1639              		.cfi_endproc
 1640              	.LFE75:
 1642 0076 00BF     		.section	.text.HAL_IRDA_DMAStop,"ax",%progbits
 1643              		.align	2
 1644              		.global	HAL_IRDA_DMAStop
 1645              		.thumb
 1646              		.thumb_func
 1648              	HAL_IRDA_DMAStop:
 1649              	.LFB76:
 894:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 1650              		.loc 1 894 0
 1651              		.cfi_startproc
 1652              		@ args = 0, pretend = 0, frame = 0
 1653              		@ frame_needed = 0, uses_anonymous_args = 0
 1654              	.LVL152:
 1655 0000 10B5     		push	{r4, lr}
 1656              	.LCFI20:
 1657              		.cfi_def_cfa_offset 8
 1658              		.cfi_offset 4, -8
 1659              		.cfi_offset 14, -4
 1660 0002 0446     		mov	r4, r0
 1661              	.LVL153:
 903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 1662              		.loc 1 903 0
 1663 0004 0168     		ldr	r1, [r0]
 1664 0006 4B69     		ldr	r3, [r1, #20]
 1665 0008 03F08002 		and	r2, r3, #128
 1666              	.LVL154:
 904:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1667              		.loc 1 904 0
 1668 000c 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1669 0010 DBB2     		uxtb	r3, r3
 1670 0012 212B     		cmp	r3, #33
 1671 0014 0BD1     		bne	.L110
 904:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
ARM GAS  /tmp/ccP46s5c.s 			page 71


 1672              		.loc 1 904 0 is_stmt 0 discriminator 1
 1673 0016 52B1     		cbz	r2, .L110
 906:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1674              		.loc 1 906 0 is_stmt 1
 1675 0018 4B69     		ldr	r3, [r1, #20]
 1676 001a 23F08003 		bic	r3, r3, #128
 1677 001e 4B61     		str	r3, [r1, #20]
 909:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1678              		.loc 1 909 0
 1679 0020 C06A     		ldr	r0, [r0, #44]
 1680              	.LVL155:
 1681 0022 08B1     		cbz	r0, .L111
 911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1682              		.loc 1 911 0
 1683 0024 FFF7FEFF 		bl	HAL_DMA_Abort
 1684              	.LVL156:
 1685              	.L111:
 913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1686              		.loc 1 913 0
 1687 0028 2046     		mov	r0, r4
 1688 002a FFF7FEFF 		bl	IRDA_EndTxTransfer
 1689              	.LVL157:
 1690              	.L110:
 917:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 1691              		.loc 1 917 0
 1692 002e 2168     		ldr	r1, [r4]
 1693 0030 4B69     		ldr	r3, [r1, #20]
 1694 0032 03F04002 		and	r2, r3, #64
 1695              	.LVL158:
 918:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1696              		.loc 1 918 0
 1697 0036 94F83630 		ldrb	r3, [r4, #54]	@ zero_extendqisi2
 1698 003a DBB2     		uxtb	r3, r3
 1699 003c 222B     		cmp	r3, #34
 1700 003e 0BD1     		bne	.L112
 918:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1701              		.loc 1 918 0 is_stmt 0 discriminator 1
 1702 0040 52B1     		cbz	r2, .L112
 920:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1703              		.loc 1 920 0 is_stmt 1
 1704 0042 4B69     		ldr	r3, [r1, #20]
 1705 0044 23F04003 		bic	r3, r3, #64
 1706 0048 4B61     		str	r3, [r1, #20]
 923:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1707              		.loc 1 923 0
 1708 004a 206B     		ldr	r0, [r4, #48]
 1709 004c 08B1     		cbz	r0, .L113
 925:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1710              		.loc 1 925 0
 1711 004e FFF7FEFF 		bl	HAL_DMA_Abort
 1712              	.LVL159:
 1713              	.L113:
 927:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1714              		.loc 1 927 0
 1715 0052 2046     		mov	r0, r4
 1716 0054 FFF7FEFF 		bl	IRDA_EndRxTransfer
 1717              	.LVL160:
ARM GAS  /tmp/ccP46s5c.s 			page 72


 1718              	.L112:
 931:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1719              		.loc 1 931 0
 1720 0058 0020     		movs	r0, #0
 1721 005a 10BD     		pop	{r4, pc}
 1722              		.cfi_endproc
 1723              	.LFE76:
 1725              		.section	.text.HAL_IRDA_Abort,"ax",%progbits
 1726              		.align	2
 1727              		.global	HAL_IRDA_Abort
 1728              		.thumb
 1729              		.thumb_func
 1731              	HAL_IRDA_Abort:
 1732              	.LFB77:
 946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1733              		.loc 1 946 0
 1734              		.cfi_startproc
 1735              		@ args = 0, pretend = 0, frame = 0
 1736              		@ frame_needed = 0, uses_anonymous_args = 0
 1737              	.LVL161:
 1738 0000 10B5     		push	{r4, lr}
 1739              	.LCFI21:
 1740              		.cfi_def_cfa_offset 8
 1741              		.cfi_offset 4, -8
 1742              		.cfi_offset 14, -4
 1743 0002 0446     		mov	r4, r0
 948:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1744              		.loc 1 948 0
 1745 0004 0268     		ldr	r2, [r0]
 1746 0006 D368     		ldr	r3, [r2, #12]
 1747 0008 23F4F073 		bic	r3, r3, #480
 1748 000c D360     		str	r3, [r2, #12]
 949:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 1749              		.loc 1 949 0
 1750 000e 0268     		ldr	r2, [r0]
 1751 0010 5369     		ldr	r3, [r2, #20]
 1752 0012 23F00103 		bic	r3, r3, #1
 1753 0016 5361     		str	r3, [r2, #20]
 952:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1754              		.loc 1 952 0
 1755 0018 0368     		ldr	r3, [r0]
 1756 001a 5A69     		ldr	r2, [r3, #20]
 1757 001c 12F0800F 		tst	r2, #128
 1758 0020 0AD0     		beq	.L116
 954:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1759              		.loc 1 954 0
 1760 0022 5A69     		ldr	r2, [r3, #20]
 1761 0024 22F08002 		bic	r2, r2, #128
 1762 0028 5A61     		str	r2, [r3, #20]
 957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1763              		.loc 1 957 0
 1764 002a C36A     		ldr	r3, [r0, #44]
 1765 002c 23B1     		cbz	r3, .L116
 961:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1766              		.loc 1 961 0
 1767 002e 0022     		movs	r2, #0
 1768 0030 5A63     		str	r2, [r3, #52]
ARM GAS  /tmp/ccP46s5c.s 			page 73


 963:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1769              		.loc 1 963 0
 1770 0032 C06A     		ldr	r0, [r0, #44]
 1771              	.LVL162:
 1772 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1773              	.LVL163:
 1774              	.L116:
 968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1775              		.loc 1 968 0
 1776 0038 2368     		ldr	r3, [r4]
 1777 003a 5A69     		ldr	r2, [r3, #20]
 1778 003c 12F0400F 		tst	r2, #64
 1779 0040 0AD0     		beq	.L117
 970:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1780              		.loc 1 970 0
 1781 0042 5A69     		ldr	r2, [r3, #20]
 1782 0044 22F04002 		bic	r2, r2, #64
 1783 0048 5A61     		str	r2, [r3, #20]
 973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1784              		.loc 1 973 0
 1785 004a 236B     		ldr	r3, [r4, #48]
 1786 004c 23B1     		cbz	r3, .L117
 977:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1787              		.loc 1 977 0
 1788 004e 0022     		movs	r2, #0
 1789 0050 5A63     		str	r2, [r3, #52]
 979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1790              		.loc 1 979 0
 1791 0052 206B     		ldr	r0, [r4, #48]
 1792 0054 FFF7FEFF 		bl	HAL_DMA_Abort
 1793              	.LVL164:
 1794              	.L117:
 984:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 1795              		.loc 1 984 0
 1796 0058 0020     		movs	r0, #0
 1797 005a 6084     		strh	r0, [r4, #34]	@ movhi
 985:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1798              		.loc 1 985 0
 1799 005c 6085     		strh	r0, [r4, #42]	@ movhi
 988:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1800              		.loc 1 988 0
 1801 005e A063     		str	r0, [r4, #56]
 991:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 1802              		.loc 1 991 0
 1803 0060 2023     		movs	r3, #32
 1804 0062 84F83630 		strb	r3, [r4, #54]
 992:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1805              		.loc 1 992 0
 1806 0066 84F83530 		strb	r3, [r4, #53]
 995:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1807              		.loc 1 995 0
 1808 006a 10BD     		pop	{r4, pc}
 1809              		.cfi_endproc
 1810              	.LFE77:
 1812              		.section	.text.HAL_IRDA_AbortTransmit,"ax",%progbits
 1813              		.align	2
 1814              		.global	HAL_IRDA_AbortTransmit
ARM GAS  /tmp/ccP46s5c.s 			page 74


 1815              		.thumb
 1816              		.thumb_func
 1818              	HAL_IRDA_AbortTransmit:
 1819              	.LFB78:
1010:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 1820              		.loc 1 1010 0
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 0
 1823              		@ frame_needed = 0, uses_anonymous_args = 0
 1824              	.LVL165:
 1825 0000 10B5     		push	{r4, lr}
 1826              	.LCFI22:
 1827              		.cfi_def_cfa_offset 8
 1828              		.cfi_offset 4, -8
 1829              		.cfi_offset 14, -4
 1830 0002 0446     		mov	r4, r0
1012:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1831              		.loc 1 1012 0
 1832 0004 0268     		ldr	r2, [r0]
 1833 0006 D368     		ldr	r3, [r2, #12]
 1834 0008 23F0C003 		bic	r3, r3, #192
 1835 000c D360     		str	r3, [r2, #12]
1015:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1836              		.loc 1 1015 0
 1837 000e 0368     		ldr	r3, [r0]
 1838 0010 5A69     		ldr	r2, [r3, #20]
 1839 0012 12F0800F 		tst	r2, #128
 1840 0016 0AD0     		beq	.L120
1017:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1841              		.loc 1 1017 0
 1842 0018 5A69     		ldr	r2, [r3, #20]
 1843 001a 22F08002 		bic	r2, r2, #128
 1844 001e 5A61     		str	r2, [r3, #20]
1020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1845              		.loc 1 1020 0
 1846 0020 C36A     		ldr	r3, [r0, #44]
 1847 0022 23B1     		cbz	r3, .L120
1024:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1848              		.loc 1 1024 0
 1849 0024 0022     		movs	r2, #0
 1850 0026 5A63     		str	r2, [r3, #52]
1026:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1851              		.loc 1 1026 0
 1852 0028 C06A     		ldr	r0, [r0, #44]
 1853              	.LVL166:
 1854 002a FFF7FEFF 		bl	HAL_DMA_Abort
 1855              	.LVL167:
 1856              	.L120:
1031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1857              		.loc 1 1031 0
 1858 002e 0020     		movs	r0, #0
 1859 0030 6084     		strh	r0, [r4, #34]	@ movhi
1034:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1860              		.loc 1 1034 0
 1861 0032 2023     		movs	r3, #32
 1862 0034 84F83530 		strb	r3, [r4, #53]
1037:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
ARM GAS  /tmp/ccP46s5c.s 			page 75


 1863              		.loc 1 1037 0
 1864 0038 10BD     		pop	{r4, pc}
 1865              		.cfi_endproc
 1866              	.LFE78:
 1868 003a 00BF     		.section	.text.HAL_IRDA_AbortReceive,"ax",%progbits
 1869              		.align	2
 1870              		.global	HAL_IRDA_AbortReceive
 1871              		.thumb
 1872              		.thumb_func
 1874              	HAL_IRDA_AbortReceive:
 1875              	.LFB79:
1052:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1876              		.loc 1 1052 0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 0
 1879              		@ frame_needed = 0, uses_anonymous_args = 0
 1880              	.LVL168:
 1881 0000 10B5     		push	{r4, lr}
 1882              	.LCFI23:
 1883              		.cfi_def_cfa_offset 8
 1884              		.cfi_offset 4, -8
 1885              		.cfi_offset 14, -4
 1886 0002 0446     		mov	r4, r0
1054:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1887              		.loc 1 1054 0
 1888 0004 0268     		ldr	r2, [r0]
 1889 0006 D368     		ldr	r3, [r2, #12]
 1890 0008 23F49073 		bic	r3, r3, #288
 1891 000c D360     		str	r3, [r2, #12]
1055:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1892              		.loc 1 1055 0
 1893 000e 0268     		ldr	r2, [r0]
 1894 0010 5369     		ldr	r3, [r2, #20]
 1895 0012 23F00103 		bic	r3, r3, #1
 1896 0016 5361     		str	r3, [r2, #20]
1058:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1897              		.loc 1 1058 0
 1898 0018 0368     		ldr	r3, [r0]
 1899 001a 5A69     		ldr	r2, [r3, #20]
 1900 001c 12F0400F 		tst	r2, #64
 1901 0020 0AD0     		beq	.L123
1060:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1902              		.loc 1 1060 0
 1903 0022 5A69     		ldr	r2, [r3, #20]
 1904 0024 22F04002 		bic	r2, r2, #64
 1905 0028 5A61     		str	r2, [r3, #20]
1063:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 1906              		.loc 1 1063 0
 1907 002a 036B     		ldr	r3, [r0, #48]
 1908 002c 23B1     		cbz	r3, .L123
1067:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1909              		.loc 1 1067 0
 1910 002e 0022     		movs	r2, #0
 1911 0030 5A63     		str	r2, [r3, #52]
1069:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 1912              		.loc 1 1069 0
 1913 0032 006B     		ldr	r0, [r0, #48]
ARM GAS  /tmp/ccP46s5c.s 			page 76


 1914              	.LVL169:
 1915 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1916              	.LVL170:
 1917              	.L123:
1074:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1918              		.loc 1 1074 0
 1919 0038 0020     		movs	r0, #0
 1920 003a 6085     		strh	r0, [r4, #42]	@ movhi
1077:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1921              		.loc 1 1077 0
 1922 003c 2023     		movs	r3, #32
 1923 003e 84F83630 		strb	r3, [r4, #54]
1080:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 1924              		.loc 1 1080 0
 1925 0042 10BD     		pop	{r4, pc}
 1926              		.cfi_endproc
 1927              	.LFE79:
 1929              		.section	.text.HAL_IRDA_TxCpltCallback,"ax",%progbits
 1930              		.align	2
 1931              		.weak	HAL_IRDA_TxCpltCallback
 1932              		.thumb
 1933              		.thumb_func
 1935              	HAL_IRDA_TxCpltCallback:
 1936              	.LFB84:
1469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 1937              		.loc 1 1469 0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 0
 1940              		@ frame_needed = 0, uses_anonymous_args = 0
 1941              		@ link register save eliminated.
 1942              	.LVL171:
 1943 0000 7047     		bx	lr
 1944              		.cfi_endproc
 1945              	.LFE84:
 1947 0002 00BF     		.section	.text.IRDA_DMATransmitCplt,"ax",%progbits
 1948              		.align	2
 1949              		.thumb
 1950              		.thumb_func
 1952              	IRDA_DMATransmitCplt:
 1953              	.LFB94:
1640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1954              		.loc 1 1640 0
 1955              		.cfi_startproc
 1956              		@ args = 0, pretend = 0, frame = 0
 1957              		@ frame_needed = 0, uses_anonymous_args = 0
 1958              	.LVL172:
1640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1959              		.loc 1 1640 0
 1960 0000 08B5     		push	{r3, lr}
 1961              	.LCFI24:
 1962              		.cfi_def_cfa_offset 8
 1963              		.cfi_offset 3, -8
 1964              		.cfi_offset 14, -4
1641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Normal mode */
 1965              		.loc 1 1641 0
 1966 0002 436A     		ldr	r3, [r0, #36]
 1967              	.LVL173:
ARM GAS  /tmp/ccP46s5c.s 			page 77


1643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 1968              		.loc 1 1643 0
 1969 0004 0268     		ldr	r2, [r0]
 1970 0006 1268     		ldr	r2, [r2]
 1971 0008 12F0200F 		tst	r2, #32
 1972 000c 0CD1     		bne	.L127
1645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1973              		.loc 1 1645 0
 1974 000e 0022     		movs	r2, #0
 1975 0010 5A84     		strh	r2, [r3, #34]	@ movhi
1649:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 1976              		.loc 1 1649 0
 1977 0012 1968     		ldr	r1, [r3]
 1978 0014 4A69     		ldr	r2, [r1, #20]
 1979 0016 22F08002 		bic	r2, r2, #128
 1980 001a 4A61     		str	r2, [r1, #20]
1652:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1981              		.loc 1 1652 0
 1982 001c 1A68     		ldr	r2, [r3]
 1983 001e D368     		ldr	r3, [r2, #12]
 1984              	.LVL174:
 1985 0020 43F04003 		orr	r3, r3, #64
 1986 0024 D360     		str	r3, [r2, #12]
 1987 0026 08BD     		pop	{r3, pc}
 1988              	.LVL175:
 1989              	.L127:
1657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 1990              		.loc 1 1657 0
 1991 0028 1846     		mov	r0, r3
 1992              	.LVL176:
 1993 002a FFF7FEFF 		bl	HAL_IRDA_TxCpltCallback
 1994              	.LVL177:
 1995 002e 08BD     		pop	{r3, pc}
 1996              		.cfi_endproc
 1997              	.LFE94:
 1999              		.section	.text.IRDA_EndTransmit_IT,"ax",%progbits
 2000              		.align	2
 2001              		.thumb
 2002              		.thumb_func
 2004              	IRDA_EndTransmit_IT:
 2005              	.LFB108:
1997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable the IRDA Transmit Complete Interrupt */    
 2006              		.loc 1 1997 0
 2007              		.cfi_startproc
 2008              		@ args = 0, pretend = 0, frame = 0
 2009              		@ frame_needed = 0, uses_anonymous_args = 0
 2010              	.LVL178:
 2011 0000 08B5     		push	{r3, lr}
 2012              	.LCFI25:
 2013              		.cfi_def_cfa_offset 8
 2014              		.cfi_offset 3, -8
 2015              		.cfi_offset 14, -4
1999:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 2016              		.loc 1 1999 0
 2017 0002 0168     		ldr	r1, [r0]
 2018 0004 CB68     		ldr	r3, [r1, #12]
 2019 0006 23F04003 		bic	r3, r3, #64
ARM GAS  /tmp/ccP46s5c.s 			page 78


 2020 000a CB60     		str	r3, [r1, #12]
2002:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   HAL_IRDA_TxCpltCallback(hirda);
 2021              		.loc 1 2002 0
 2022 000c 2023     		movs	r3, #32
 2023 000e 80F83530 		strb	r3, [r0, #53]
2003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 2024              		.loc 1 2003 0
 2025 0012 FFF7FEFF 		bl	HAL_IRDA_TxCpltCallback
 2026              	.LVL179:
2006:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2027              		.loc 1 2006 0
 2028 0016 0020     		movs	r0, #0
 2029 0018 08BD     		pop	{r3, pc}
 2030              		.cfi_endproc
 2031              	.LFE108:
 2033 001a 00BF     		.section	.text.HAL_IRDA_TxHalfCpltCallback,"ax",%progbits
 2034              		.align	2
 2035              		.weak	HAL_IRDA_TxHalfCpltCallback
 2036              		.thumb
 2037              		.thumb_func
 2039              	HAL_IRDA_TxHalfCpltCallback:
 2040              	.LFB85:
1484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2041              		.loc 1 1484 0
 2042              		.cfi_startproc
 2043              		@ args = 0, pretend = 0, frame = 0
 2044              		@ frame_needed = 0, uses_anonymous_args = 0
 2045              		@ link register save eliminated.
 2046              	.LVL180:
 2047 0000 7047     		bx	lr
 2048              		.cfi_endproc
 2049              	.LFE85:
 2051 0002 00BF     		.section	.text.IRDA_DMATransmitHalfCplt,"ax",%progbits
 2052              		.align	2
 2053              		.thumb
 2054              		.thumb_func
 2056              	IRDA_DMATransmitHalfCplt:
 2057              	.LFB95:
1668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2058              		.loc 1 1668 0
 2059              		.cfi_startproc
 2060              		@ args = 0, pretend = 0, frame = 0
 2061              		@ frame_needed = 0, uses_anonymous_args = 0
 2062              	.LVL181:
1668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2063              		.loc 1 1668 0
 2064 0000 08B5     		push	{r3, lr}
 2065              	.LCFI26:
 2066              		.cfi_def_cfa_offset 8
 2067              		.cfi_offset 3, -8
 2068              		.cfi_offset 14, -4
 2069              	.LVL182:
1671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 2070              		.loc 1 1671 0
 2071 0002 406A     		ldr	r0, [r0, #36]
 2072              	.LVL183:
 2073 0004 FFF7FEFF 		bl	HAL_IRDA_TxHalfCpltCallback
ARM GAS  /tmp/ccP46s5c.s 			page 79


 2074              	.LVL184:
 2075 0008 08BD     		pop	{r3, pc}
 2076              		.cfi_endproc
 2077              	.LFE95:
 2079 000a 00BF     		.section	.text.HAL_IRDA_RxCpltCallback,"ax",%progbits
 2080              		.align	2
 2081              		.weak	HAL_IRDA_RxCpltCallback
 2082              		.thumb
 2083              		.thumb_func
 2085              	HAL_IRDA_RxCpltCallback:
 2086              	.LFB86:
1499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2087              		.loc 1 1499 0
 2088              		.cfi_startproc
 2089              		@ args = 0, pretend = 0, frame = 0
 2090              		@ frame_needed = 0, uses_anonymous_args = 0
 2091              		@ link register save eliminated.
 2092              	.LVL185:
 2093 0000 7047     		bx	lr
 2094              		.cfi_endproc
 2095              	.LFE86:
 2097 0002 00BF     		.section	.text.IRDA_DMAReceiveCplt,"ax",%progbits
 2098              		.align	2
 2099              		.thumb
 2100              		.thumb_func
 2102              	IRDA_DMAReceiveCplt:
 2103              	.LFB96:
1680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2104              		.loc 1 1680 0
 2105              		.cfi_startproc
 2106              		@ args = 0, pretend = 0, frame = 0
 2107              		@ frame_needed = 0, uses_anonymous_args = 0
 2108              	.LVL186:
1680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2109              		.loc 1 1680 0
 2110 0000 08B5     		push	{r3, lr}
 2111              	.LCFI27:
 2112              		.cfi_def_cfa_offset 8
 2113              		.cfi_offset 3, -8
 2114              		.cfi_offset 14, -4
1681:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* DMA Normal mode */
 2115              		.loc 1 1681 0
 2116 0002 436A     		ldr	r3, [r0, #36]
 2117              	.LVL187:
1683:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2118              		.loc 1 1683 0
 2119 0004 0268     		ldr	r2, [r0]
 2120 0006 1268     		ldr	r2, [r2]
 2121 0008 12F0200F 		tst	r2, #32
 2122 000c 13D1     		bne	.L137
1685:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2123              		.loc 1 1685 0
 2124 000e 0022     		movs	r2, #0
 2125 0010 5A85     		strh	r2, [r3, #42]	@ movhi
1688:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2126              		.loc 1 1688 0
 2127 0012 1968     		ldr	r1, [r3]
ARM GAS  /tmp/ccP46s5c.s 			page 80


 2128 0014 CA68     		ldr	r2, [r1, #12]
 2129 0016 22F48072 		bic	r2, r2, #256
 2130 001a CA60     		str	r2, [r1, #12]
1689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     
 2131              		.loc 1 1689 0
 2132 001c 1968     		ldr	r1, [r3]
 2133 001e 4A69     		ldr	r2, [r1, #20]
 2134 0020 22F00102 		bic	r2, r2, #1
 2135 0024 4A61     		str	r2, [r1, #20]
1693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2136              		.loc 1 1693 0
 2137 0026 1968     		ldr	r1, [r3]
 2138 0028 4A69     		ldr	r2, [r1, #20]
 2139 002a 22F04002 		bic	r2, r2, #64
 2140 002e 4A61     		str	r2, [r1, #20]
1696:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2141              		.loc 1 1696 0
 2142 0030 2022     		movs	r2, #32
 2143 0032 83F83620 		strb	r2, [r3, #54]
 2144              	.L137:
1698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 2145              		.loc 1 1698 0
 2146 0036 1846     		mov	r0, r3
 2147              	.LVL188:
 2148 0038 FFF7FEFF 		bl	HAL_IRDA_RxCpltCallback
 2149              	.LVL189:
 2150 003c 08BD     		pop	{r3, pc}
 2151              		.cfi_endproc
 2152              	.LFE96:
 2154 003e 00BF     		.section	.text.IRDA_Receive_IT,"ax",%progbits
 2155              		.align	2
 2156              		.thumb
 2157              		.thumb_func
 2159              	IRDA_Receive_IT:
 2160              	.LFB109:
2015:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint16_t* tmp;
 2161              		.loc 1 2015 0
 2162              		.cfi_startproc
 2163              		@ args = 0, pretend = 0, frame = 0
 2164              		@ frame_needed = 0, uses_anonymous_args = 0
 2165              	.LVL190:
 2166 0000 08B5     		push	{r3, lr}
 2167              	.LCFI28:
 2168              		.cfi_def_cfa_offset 8
 2169              		.cfi_offset 3, -8
 2170              		.cfi_offset 14, -4
2020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2171              		.loc 1 2020 0
 2172 0002 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 2173 0006 DBB2     		uxtb	r3, r3
 2174 0008 222B     		cmp	r3, #34
 2175 000a 3FD1     		bne	.L145
2022:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 2176              		.loc 1 2022 0
 2177 000c 0368     		ldr	r3, [r0]
 2178 000e 5B68     		ldr	r3, [r3, #4]
 2179 0010 99B2     		uxth	r1, r3
ARM GAS  /tmp/ccP46s5c.s 			page 81


 2180              	.LVL191:
2023:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2181              		.loc 1 2023 0
 2182 0012 8268     		ldr	r2, [r0, #8]
 2183 0014 B2F5805F 		cmp	r2, #4096
 2184 0018 0FD1     		bne	.L141
2025:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(hirda->Init.Parity == IRDA_PARITY_NONE)
 2185              		.loc 1 2025 0
 2186 001a 426A     		ldr	r2, [r0, #36]
 2187              	.LVL192:
2026:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2188              		.loc 1 2026 0
 2189 001c C368     		ldr	r3, [r0, #12]
 2190 001e 33B9     		cbnz	r3, .L142
2028:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->pRxBuffPtr += 2U;
 2191              		.loc 1 2028 0
 2192 0020 C1F30801 		ubfx	r1, r1, #0, #9
 2193              	.LVL193:
 2194 0024 1180     		strh	r1, [r2]	@ movhi
2029:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2195              		.loc 1 2029 0
 2196 0026 436A     		ldr	r3, [r0, #36]
 2197 0028 0233     		adds	r3, r3, #2
 2198 002a 4362     		str	r3, [r0, #36]
 2199 002c 12E0     		b	.L143
 2200              	.LVL194:
 2201              	.L142:
2033:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->pRxBuffPtr += 1U;
 2202              		.loc 1 2033 0
 2203 002e C9B2     		uxtb	r1, r1
 2204              	.LVL195:
 2205 0030 1180     		strh	r1, [r2]	@ movhi
2034:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2206              		.loc 1 2034 0
 2207 0032 436A     		ldr	r3, [r0, #36]
 2208 0034 0133     		adds	r3, r3, #1
 2209 0036 4362     		str	r3, [r0, #36]
 2210 0038 0CE0     		b	.L143
 2211              	.LVL196:
 2212              	.L141:
2039:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2213              		.loc 1 2039 0
 2214 003a C268     		ldr	r2, [r0, #12]
 2215 003c 22B9     		cbnz	r2, .L144
2041:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2216              		.loc 1 2041 0
 2217 003e 426A     		ldr	r2, [r0, #36]
 2218 0040 511C     		adds	r1, r2, #1
 2219              	.LVL197:
 2220 0042 4162     		str	r1, [r0, #36]
 2221 0044 1370     		strb	r3, [r2]
 2222 0046 05E0     		b	.L143
 2223              	.LVL198:
 2224              	.L144:
2045:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2225              		.loc 1 2045 0
 2226 0048 426A     		ldr	r2, [r0, #36]
ARM GAS  /tmp/ccP46s5c.s 			page 82


 2227 004a 511C     		adds	r1, r2, #1
 2228              	.LVL199:
 2229 004c 4162     		str	r1, [r0, #36]
 2230 004e 03F07F03 		and	r3, r3, #127
 2231              	.LVL200:
 2232 0052 1370     		strb	r3, [r2]
 2233              	.L143:
2049:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2234              		.loc 1 2049 0
 2235 0054 438D     		ldrh	r3, [r0, #42]
 2236 0056 9BB2     		uxth	r3, r3
 2237 0058 013B     		subs	r3, r3, #1
 2238 005a 9BB2     		uxth	r3, r3
 2239 005c 4385     		strh	r3, [r0, #42]	@ movhi
 2240 005e BBB9     		cbnz	r3, .L146
2052:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2241              		.loc 1 2052 0
 2242 0060 0268     		ldr	r2, [r0]
 2243 0062 D368     		ldr	r3, [r2, #12]
 2244 0064 23F02003 		bic	r3, r3, #32
 2245 0068 D360     		str	r3, [r2, #12]
2055:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       
 2246              		.loc 1 2055 0
 2247 006a 0268     		ldr	r2, [r0]
 2248 006c D368     		ldr	r3, [r2, #12]
 2249 006e 23F48073 		bic	r3, r3, #256
 2250 0072 D360     		str	r3, [r2, #12]
2058:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       
 2251              		.loc 1 2058 0
 2252 0074 0268     		ldr	r2, [r0]
 2253 0076 5369     		ldr	r3, [r2, #20]
 2254 0078 23F00103 		bic	r3, r3, #1
 2255 007c 5361     		str	r3, [r2, #20]
2061:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       HAL_IRDA_RxCpltCallback(hirda);
 2256              		.loc 1 2061 0
 2257 007e 2023     		movs	r3, #32
 2258 0080 80F83630 		strb	r3, [r0, #54]
2062:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2259              		.loc 1 2062 0
 2260 0084 FFF7FEFF 		bl	HAL_IRDA_RxCpltCallback
 2261              	.LVL201:
2064:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2262              		.loc 1 2064 0
 2263 0088 0020     		movs	r0, #0
 2264 008a 08BD     		pop	{r3, pc}
 2265              	.LVL202:
 2266              	.L145:
2070:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2267              		.loc 1 2070 0
 2268 008c 0220     		movs	r0, #2
 2269              	.LVL203:
 2270 008e 08BD     		pop	{r3, pc}
 2271              	.LVL204:
 2272              	.L146:
2066:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2273              		.loc 1 2066 0
 2274 0090 0020     		movs	r0, #0
ARM GAS  /tmp/ccP46s5c.s 			page 83


 2275              	.LVL205:
2072:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2276              		.loc 1 2072 0
 2277 0092 08BD     		pop	{r3, pc}
 2278              		.cfi_endproc
 2279              	.LFE109:
 2281              		.section	.text.HAL_IRDA_RxHalfCpltCallback,"ax",%progbits
 2282              		.align	2
 2283              		.weak	HAL_IRDA_RxHalfCpltCallback
 2284              		.thumb
 2285              		.thumb_func
 2287              	HAL_IRDA_RxHalfCpltCallback:
 2288              	.LFB87:
1514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2289              		.loc 1 1514 0
 2290              		.cfi_startproc
 2291              		@ args = 0, pretend = 0, frame = 0
 2292              		@ frame_needed = 0, uses_anonymous_args = 0
 2293              		@ link register save eliminated.
 2294              	.LVL206:
 2295 0000 7047     		bx	lr
 2296              		.cfi_endproc
 2297              	.LFE87:
 2299 0002 00BF     		.section	.text.IRDA_DMAReceiveHalfCplt,"ax",%progbits
 2300              		.align	2
 2301              		.thumb
 2302              		.thumb_func
 2304              	IRDA_DMAReceiveHalfCplt:
 2305              	.LFB97:
1708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2306              		.loc 1 1708 0
 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 0
 2309              		@ frame_needed = 0, uses_anonymous_args = 0
 2310              	.LVL207:
1708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2311              		.loc 1 1708 0
 2312 0000 08B5     		push	{r3, lr}
 2313              	.LCFI29:
 2314              		.cfi_def_cfa_offset 8
 2315              		.cfi_offset 3, -8
 2316              		.cfi_offset 14, -4
 2317              	.LVL208:
1710:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 2318              		.loc 1 1710 0
 2319 0002 406A     		ldr	r0, [r0, #36]
 2320              	.LVL209:
 2321 0004 FFF7FEFF 		bl	HAL_IRDA_RxHalfCpltCallback
 2322              	.LVL210:
 2323 0008 08BD     		pop	{r3, pc}
 2324              		.cfi_endproc
 2325              	.LFE97:
 2327 000a 00BF     		.section	.text.HAL_IRDA_ErrorCallback,"ax",%progbits
 2328              		.align	2
 2329              		.weak	HAL_IRDA_ErrorCallback
 2330              		.thumb
 2331              		.thumb_func
ARM GAS  /tmp/ccP46s5c.s 			page 84


 2333              	HAL_IRDA_ErrorCallback:
 2334              	.LFB88:
1529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2335              		.loc 1 1529 0
 2336              		.cfi_startproc
 2337              		@ args = 0, pretend = 0, frame = 0
 2338              		@ frame_needed = 0, uses_anonymous_args = 0
 2339              		@ link register save eliminated.
 2340              	.LVL211:
 2341 0000 7047     		bx	lr
 2342              		.cfi_endproc
 2343              	.LFE88:
 2345 0002 00BF     		.section	.text.IRDA_DMAError,"ax",%progbits
 2346              		.align	2
 2347              		.thumb
 2348              		.thumb_func
 2350              	IRDA_DMAError:
 2351              	.LFB98:
1719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 2352              		.loc 1 1719 0
 2353              		.cfi_startproc
 2354              		@ args = 0, pretend = 0, frame = 0
 2355              		@ frame_needed = 0, uses_anonymous_args = 0
 2356              	.LVL212:
1719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 2357              		.loc 1 1719 0
 2358 0000 10B5     		push	{r4, lr}
 2359              	.LCFI30:
 2360              		.cfi_def_cfa_offset 8
 2361              		.cfi_offset 4, -8
 2362              		.cfi_offset 14, -4
 2363              	.LVL213:
1721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 2364              		.loc 1 1721 0
 2365 0002 446A     		ldr	r4, [r0, #36]
 2366              	.LVL214:
1724:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 2367              		.loc 1 1724 0
 2368 0004 2368     		ldr	r3, [r4]
 2369 0006 5B69     		ldr	r3, [r3, #20]
 2370 0008 03F08002 		and	r2, r3, #128
 2371              	.LVL215:
1725:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2372              		.loc 1 1725 0
 2373 000c 94F83530 		ldrb	r3, [r4, #53]	@ zero_extendqisi2
 2374 0010 DBB2     		uxtb	r3, r3
 2375 0012 212B     		cmp	r3, #33
 2376 0014 05D1     		bne	.L153
1725:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2377              		.loc 1 1725 0 is_stmt 0 discriminator 1
 2378 0016 22B1     		cbz	r2, .L153
1727:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
 2379              		.loc 1 1727 0 is_stmt 1
 2380 0018 0023     		movs	r3, #0
 2381 001a 6384     		strh	r3, [r4, #34]	@ movhi
1728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2382              		.loc 1 1728 0
ARM GAS  /tmp/ccP46s5c.s 			page 85


 2383 001c 2046     		mov	r0, r4
 2384              	.LVL216:
 2385 001e FFF7FEFF 		bl	IRDA_EndTxTransfer
 2386              	.LVL217:
 2387              	.L153:
1732:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 2388              		.loc 1 1732 0
 2389 0022 2368     		ldr	r3, [r4]
 2390 0024 5B69     		ldr	r3, [r3, #20]
 2391 0026 03F04002 		and	r2, r3, #64
 2392              	.LVL218:
1733:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2393              		.loc 1 1733 0
 2394 002a 94F83630 		ldrb	r3, [r4, #54]	@ zero_extendqisi2
 2395 002e DBB2     		uxtb	r3, r3
 2396 0030 222B     		cmp	r3, #34
 2397 0032 05D1     		bne	.L154
1733:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2398              		.loc 1 1733 0 is_stmt 0 discriminator 1
 2399 0034 22B1     		cbz	r2, .L154
1735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
 2400              		.loc 1 1735 0 is_stmt 1
 2401 0036 0023     		movs	r3, #0
 2402 0038 6385     		strh	r3, [r4, #42]	@ movhi
1736:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2403              		.loc 1 1736 0
 2404 003a 2046     		mov	r0, r4
 2405 003c FFF7FEFF 		bl	IRDA_EndRxTransfer
 2406              	.LVL219:
 2407              	.L154:
1739:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 2408              		.loc 1 1739 0
 2409 0040 A36B     		ldr	r3, [r4, #56]
 2410 0042 43F01003 		orr	r3, r3, #16
 2411 0046 A363     		str	r3, [r4, #56]
1741:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 2412              		.loc 1 1741 0
 2413 0048 2046     		mov	r0, r4
 2414 004a FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 2415              	.LVL220:
 2416 004e 10BD     		pop	{r4, pc}
 2417              		.cfi_endproc
 2418              	.LFE98:
 2420              		.section	.text.HAL_IRDA_IRQHandler,"ax",%progbits
 2421              		.align	2
 2422              		.global	HAL_IRDA_IRQHandler
 2423              		.thumb
 2424              		.thumb_func
 2426              	HAL_IRDA_IRQHandler:
 2427              	.LFB83:
1342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t isrflags   = READ_REG(hirda->Instance->SR);
 2428              		.loc 1 1342 0
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 0
 2431              		@ frame_needed = 0, uses_anonymous_args = 0
 2432              	.LVL221:
 2433 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccP46s5c.s 			page 86


 2434              	.LCFI31:
 2435              		.cfi_def_cfa_offset 8
 2436              		.cfi_offset 4, -8
 2437              		.cfi_offset 14, -4
 2438 0002 0446     		mov	r4, r0
1343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 2439              		.loc 1 1343 0
 2440 0004 0268     		ldr	r2, [r0]
 2441 0006 1368     		ldr	r3, [r2]
 2442              	.LVL222:
1344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t cr3its     = READ_REG(hirda->Instance->CR3);
 2443              		.loc 1 1344 0
 2444 0008 D168     		ldr	r1, [r2, #12]
 2445              	.LVL223:
1345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****    uint32_t errorflags = 0x00U;
 2446              		.loc 1 1345 0
 2447 000a 5269     		ldr	r2, [r2, #20]
 2448              	.LVL224:
1351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2449              		.loc 1 1351 0
 2450 000c 13F00F00 		ands	r0, r3, #15
 2451              	.LVL225:
 2452 0010 09D1     		bne	.L157
1354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2453              		.loc 1 1354 0
 2454 0012 13F0200F 		tst	r3, #32
 2455 0016 06D0     		beq	.L157
1354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2456              		.loc 1 1354 0 is_stmt 0 discriminator 1
 2457 0018 11F0200F 		tst	r1, #32
 2458 001c 03D0     		beq	.L157
1356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       return;
 2459              		.loc 1 1356 0 is_stmt 1
 2460 001e 2046     		mov	r0, r4
 2461              	.LVL226:
 2462 0020 FFF7FEFF 		bl	IRDA_Receive_IT
 2463              	.LVL227:
1357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2464              		.loc 1 1357 0
 2465 0024 10BD     		pop	{r4, pc}
 2466              	.LVL228:
 2467              	.L157:
1362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2468              		.loc 1 1362 0
 2469 0026 0028     		cmp	r0, #0
 2470 0028 62D0     		beq	.L159
1362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2471              		.loc 1 1362 0 is_stmt 0 discriminator 1
 2472 002a 12F00102 		ands	r2, r2, #1
 2473              	.LVL229:
 2474 002e 02D1     		bne	.L160
1362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2475              		.loc 1 1362 0 discriminator 2
 2476 0030 11F4907F 		tst	r1, #288
 2477 0034 5CD0     		beq	.L159
 2478              	.L160:
1365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
ARM GAS  /tmp/ccP46s5c.s 			page 87


 2479              		.loc 1 1365 0 is_stmt 1
 2480 0036 13F0010F 		tst	r3, #1
 2481 003a 06D0     		beq	.L161
1365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2482              		.loc 1 1365 0 is_stmt 0 discriminator 1
 2483 003c 11F4807F 		tst	r1, #256
 2484 0040 03D0     		beq	.L161
1367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2485              		.loc 1 1367 0 is_stmt 1
 2486 0042 A06B     		ldr	r0, [r4, #56]
 2487              	.LVL230:
 2488 0044 40F00100 		orr	r0, r0, #1
 2489 0048 A063     		str	r0, [r4, #56]
 2490              	.L161:
1371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2491              		.loc 1 1371 0
 2492 004a 13F0040F 		tst	r3, #4
 2493 004e 04D0     		beq	.L162
1371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2494              		.loc 1 1371 0 is_stmt 0 discriminator 1
 2495 0050 1AB1     		cbz	r2, .L162
1373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2496              		.loc 1 1373 0 is_stmt 1
 2497 0052 A06B     		ldr	r0, [r4, #56]
 2498 0054 40F00200 		orr	r0, r0, #2
 2499 0058 A063     		str	r0, [r4, #56]
 2500              	.L162:
1377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2501              		.loc 1 1377 0
 2502 005a 13F0020F 		tst	r3, #2
 2503 005e 04D0     		beq	.L163
1377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2504              		.loc 1 1377 0 is_stmt 0 discriminator 1
 2505 0060 1AB1     		cbz	r2, .L163
1379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2506              		.loc 1 1379 0 is_stmt 1
 2507 0062 A06B     		ldr	r0, [r4, #56]
 2508 0064 40F00400 		orr	r0, r0, #4
 2509 0068 A063     		str	r0, [r4, #56]
 2510              	.L163:
1383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     { 
 2511              		.loc 1 1383 0
 2512 006a 13F0080F 		tst	r3, #8
 2513 006e 04D0     		beq	.L164
1383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     { 
 2514              		.loc 1 1383 0 is_stmt 0 discriminator 1
 2515 0070 1AB1     		cbz	r2, .L164
1385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2516              		.loc 1 1385 0 is_stmt 1
 2517 0072 A26B     		ldr	r2, [r4, #56]
 2518 0074 42F00802 		orr	r2, r2, #8
 2519 0078 A263     		str	r2, [r4, #56]
 2520              	.L164:
1388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2521              		.loc 1 1388 0
 2522 007a A26B     		ldr	r2, [r4, #56]
 2523 007c 002A     		cmp	r2, #0
ARM GAS  /tmp/ccP46s5c.s 			page 88


 2524 007e 4AD0     		beq	.L156
1391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2525              		.loc 1 1391 0
 2526 0080 13F0200F 		tst	r3, #32
 2527 0084 05D0     		beq	.L165
1391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2528              		.loc 1 1391 0 is_stmt 0 discriminator 1
 2529 0086 11F0200F 		tst	r1, #32
 2530 008a 02D0     		beq	.L165
1393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2531              		.loc 1 1393 0 is_stmt 1
 2532 008c 2046     		mov	r0, r4
 2533 008e FFF7FEFF 		bl	IRDA_Receive_IT
 2534              	.LVL231:
 2535              	.L165:
1398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       if(((hirda->ErrorCode & HAL_IRDA_ERROR_ORE) != RESET) || dmarequest)
 2536              		.loc 1 1398 0
 2537 0092 2368     		ldr	r3, [r4]
 2538 0094 5B69     		ldr	r3, [r3, #20]
 2539 0096 03F04003 		and	r3, r3, #64
 2540              	.LVL232:
1399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2541              		.loc 1 1399 0
 2542 009a A26B     		ldr	r2, [r4, #56]
 2543 009c 12F0080F 		tst	r2, #8
 2544 00a0 00D1     		bne	.L166
1399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2545              		.loc 1 1399 0 is_stmt 0 discriminator 1
 2546 00a2 FBB1     		cbz	r3, .L167
 2547              	.L166:
1404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2548              		.loc 1 1404 0 is_stmt 1
 2549 00a4 2046     		mov	r0, r4
 2550 00a6 FFF7FEFF 		bl	IRDA_EndRxTransfer
 2551              	.LVL233:
1407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         {
 2552              		.loc 1 1407 0
 2553 00aa 2368     		ldr	r3, [r4]
 2554 00ac 5A69     		ldr	r2, [r3, #20]
 2555 00ae 12F0400F 		tst	r2, #64
 2556 00b2 13D0     		beq	.L168
1409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2557              		.loc 1 1409 0
 2558 00b4 5A69     		ldr	r2, [r3, #20]
 2559 00b6 22F04002 		bic	r2, r2, #64
 2560 00ba 5A61     		str	r2, [r3, #20]
1412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           {
 2561              		.loc 1 1412 0
 2562 00bc 236B     		ldr	r3, [r4, #48]
 2563 00be 4BB1     		cbz	r3, .L169
1416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2564              		.loc 1 1416 0
 2565 00c0 154A     		ldr	r2, .L172
 2566 00c2 5A63     		str	r2, [r3, #52]
1418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             {
 2567              		.loc 1 1418 0
 2568 00c4 206B     		ldr	r0, [r4, #48]
ARM GAS  /tmp/ccP46s5c.s 			page 89


 2569 00c6 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2570              	.LVL234:
 2571 00ca 20B3     		cbz	r0, .L156
1421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****             }
 2572              		.loc 1 1421 0
 2573 00cc 206B     		ldr	r0, [r4, #48]
 2574 00ce 436B     		ldr	r3, [r0, #52]
 2575 00d0 9847     		blx	r3
 2576              	.LVL235:
 2577 00d2 10BD     		pop	{r4, pc}
 2578              	.LVL236:
 2579              	.L169:
1427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****           }
 2580              		.loc 1 1427 0
 2581 00d4 2046     		mov	r0, r4
 2582 00d6 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 2583              	.LVL237:
 2584 00da 10BD     		pop	{r4, pc}
 2585              	.LVL238:
 2586              	.L168:
1433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         }
 2587              		.loc 1 1433 0
 2588 00dc 2046     		mov	r0, r4
 2589 00de FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 2590              	.LVL239:
 2591 00e2 10BD     		pop	{r4, pc}
 2592              	.LVL240:
 2593              	.L167:
1440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 2594              		.loc 1 1440 0
 2595 00e4 2046     		mov	r0, r4
 2596 00e6 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 2597              	.LVL241:
1441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2598              		.loc 1 1441 0
 2599 00ea 0023     		movs	r3, #0
 2600 00ec A363     		str	r3, [r4, #56]
 2601 00ee 10BD     		pop	{r4, pc}
 2602              	.LVL242:
 2603              	.L159:
1448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2604              		.loc 1 1448 0
 2605 00f0 13F0800F 		tst	r3, #128
 2606 00f4 06D0     		beq	.L170
1448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2607              		.loc 1 1448 0 is_stmt 0 discriminator 1
 2608 00f6 11F0800F 		tst	r1, #128
 2609 00fa 03D0     		beq	.L170
1450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return;
 2610              		.loc 1 1450 0 is_stmt 1
 2611 00fc 2046     		mov	r0, r4
 2612              	.LVL243:
 2613 00fe FFF7FEFF 		bl	IRDA_Transmit_IT
 2614              	.LVL244:
1451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2615              		.loc 1 1451 0
 2616 0102 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccP46s5c.s 			page 90


 2617              	.LVL245:
 2618              	.L170:
1455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2619              		.loc 1 1455 0
 2620 0104 13F0400F 		tst	r3, #64
 2621 0108 05D0     		beq	.L156
1455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2622              		.loc 1 1455 0 is_stmt 0 discriminator 1
 2623 010a 11F0400F 		tst	r1, #64
 2624 010e 02D0     		beq	.L156
1457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     return;
 2625              		.loc 1 1457 0 is_stmt 1
 2626 0110 2046     		mov	r0, r4
 2627              	.LVL246:
 2628 0112 FFF7FEFF 		bl	IRDA_EndTransmit_IT
 2629              	.LVL247:
 2630              	.L156:
 2631 0116 10BD     		pop	{r4, pc}
 2632              	.LVL248:
 2633              	.L173:
 2634              		.align	2
 2635              	.L172:
 2636 0118 00000000 		.word	IRDA_DMAAbortOnError
 2637              		.cfi_endproc
 2638              	.LFE83:
 2640              		.section	.text.IRDA_DMAAbortOnError,"ax",%progbits
 2641              		.align	2
 2642              		.thumb
 2643              		.thumb_func
 2645              	IRDA_DMAAbortOnError:
 2646              	.LFB102:
1817:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2647              		.loc 1 1817 0
 2648              		.cfi_startproc
 2649              		@ args = 0, pretend = 0, frame = 0
 2650              		@ frame_needed = 0, uses_anonymous_args = 0
 2651              	.LVL249:
 2652 0000 08B5     		push	{r3, lr}
 2653              	.LCFI32:
 2654              		.cfi_def_cfa_offset 8
 2655              		.cfi_offset 3, -8
 2656              		.cfi_offset 14, -4
1818:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 2657              		.loc 1 1818 0
 2658 0002 406A     		ldr	r0, [r0, #36]
 2659              	.LVL250:
1819:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 2660              		.loc 1 1819 0
 2661 0004 0023     		movs	r3, #0
 2662 0006 4385     		strh	r3, [r0, #42]	@ movhi
1820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2663              		.loc 1 1820 0
 2664 0008 4384     		strh	r3, [r0, #34]	@ movhi
1822:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 2665              		.loc 1 1822 0
 2666 000a FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 2667              	.LVL251:
ARM GAS  /tmp/ccP46s5c.s 			page 91


 2668 000e 08BD     		pop	{r3, pc}
 2669              		.cfi_endproc
 2670              	.LFE102:
 2672              		.section	.text.HAL_IRDA_AbortCpltCallback,"ax",%progbits
 2673              		.align	2
 2674              		.weak	HAL_IRDA_AbortCpltCallback
 2675              		.thumb
 2676              		.thumb_func
 2678              	HAL_IRDA_AbortCpltCallback:
 2679              	.LFB89:
1543:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2680              		.loc 1 1543 0
 2681              		.cfi_startproc
 2682              		@ args = 0, pretend = 0, frame = 0
 2683              		@ frame_needed = 0, uses_anonymous_args = 0
 2684              		@ link register save eliminated.
 2685              	.LVL252:
 2686 0000 7047     		bx	lr
 2687              		.cfi_endproc
 2688              	.LFE89:
 2690 0002 00BF     		.section	.text.HAL_IRDA_Abort_IT,"ax",%progbits
 2691              		.align	2
 2692              		.global	HAL_IRDA_Abort_IT
 2693              		.thumb
 2694              		.thumb_func
 2696              	HAL_IRDA_Abort_IT:
 2697              	.LFB80:
1097:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
 2698              		.loc 1 1097 0
 2699              		.cfi_startproc
 2700              		@ args = 0, pretend = 0, frame = 0
 2701              		@ frame_needed = 0, uses_anonymous_args = 0
 2702              	.LVL253:
1097:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
 2703              		.loc 1 1097 0
 2704 0000 10B5     		push	{r4, lr}
 2705              	.LCFI33:
 2706              		.cfi_def_cfa_offset 8
 2707              		.cfi_offset 4, -8
 2708              		.cfi_offset 14, -4
 2709 0002 0446     		mov	r4, r0
 2710              	.LVL254:
1101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2711              		.loc 1 1101 0
 2712 0004 0268     		ldr	r2, [r0]
 2713 0006 D368     		ldr	r3, [r2, #12]
 2714 0008 23F4F073 		bic	r3, r3, #480
 2715 000c D360     		str	r3, [r2, #12]
1102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2716              		.loc 1 1102 0
 2717 000e 0268     		ldr	r2, [r0]
 2718 0010 5369     		ldr	r3, [r2, #20]
 2719 0012 23F00103 		bic	r3, r3, #1
 2720 0016 5361     		str	r3, [r2, #20]
1107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2721              		.loc 1 1107 0
 2722 0018 C36A     		ldr	r3, [r0, #44]
ARM GAS  /tmp/ccP46s5c.s 			page 92


 2723 001a 4BB1     		cbz	r3, .L178
1111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2724              		.loc 1 1111 0
 2725 001c 0268     		ldr	r2, [r0]
 2726 001e 5269     		ldr	r2, [r2, #20]
 2727 0020 12F0800F 		tst	r2, #128
 2728 0024 02D0     		beq	.L179
1113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2729              		.loc 1 1113 0
 2730 0026 264A     		ldr	r2, .L190
 2731 0028 5A63     		str	r2, [r3, #52]
 2732 002a 01E0     		b	.L178
 2733              	.L179:
1117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2734              		.loc 1 1117 0
 2735 002c 0022     		movs	r2, #0
 2736 002e 5A63     		str	r2, [r3, #52]
 2737              	.L178:
1121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2738              		.loc 1 1121 0
 2739 0030 236B     		ldr	r3, [r4, #48]
 2740 0032 4BB1     		cbz	r3, .L180
1125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2741              		.loc 1 1125 0
 2742 0034 2268     		ldr	r2, [r4]
 2743 0036 5269     		ldr	r2, [r2, #20]
 2744 0038 12F0400F 		tst	r2, #64
 2745 003c 02D0     		beq	.L181
1127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2746              		.loc 1 1127 0
 2747 003e 214A     		ldr	r2, .L190+4
 2748 0040 5A63     		str	r2, [r3, #52]
 2749 0042 01E0     		b	.L180
 2750              	.L181:
1131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 2751              		.loc 1 1131 0
 2752 0044 0022     		movs	r2, #0
 2753 0046 5A63     		str	r2, [r3, #52]
 2754              	.L180:
1136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2755              		.loc 1 1136 0
 2756 0048 2368     		ldr	r3, [r4]
 2757 004a 5A69     		ldr	r2, [r3, #20]
 2758 004c 12F0800F 		tst	r2, #128
 2759 0050 0DD0     		beq	.L185
1139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2760              		.loc 1 1139 0
 2761 0052 5A69     		ldr	r2, [r3, #20]
 2762 0054 22F08002 		bic	r2, r2, #128
 2763 0058 5A61     		str	r2, [r3, #20]
1142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2764              		.loc 1 1142 0
 2765 005a E06A     		ldr	r0, [r4, #44]
 2766              	.LVL255:
 2767 005c 48B1     		cbz	r0, .L186
1148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2768              		.loc 1 1148 0
ARM GAS  /tmp/ccP46s5c.s 			page 93


 2769 005e FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2770              	.LVL256:
 2771 0062 40B1     		cbz	r0, .L187
1150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2772              		.loc 1 1150 0
 2773 0064 E36A     		ldr	r3, [r4, #44]
 2774 0066 0022     		movs	r2, #0
 2775 0068 5A63     		str	r2, [r3, #52]
1098:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2776              		.loc 1 1098 0
 2777 006a 0122     		movs	r2, #1
 2778 006c 04E0     		b	.L182
 2779              	.LVL257:
 2780              	.L185:
 2781 006e 0122     		movs	r2, #1
 2782 0070 02E0     		b	.L182
 2783              	.LVL258:
 2784              	.L186:
 2785 0072 0122     		movs	r2, #1
 2786 0074 00E0     		b	.L182
 2787              	.L187:
1154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2788              		.loc 1 1154 0
 2789 0076 0022     		movs	r2, #0
 2790              	.L182:
 2791              	.LVL259:
1160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2792              		.loc 1 1160 0
 2793 0078 2368     		ldr	r3, [r4]
 2794 007a 5969     		ldr	r1, [r3, #20]
 2795 007c 11F0400F 		tst	r1, #64
 2796 0080 0ED0     		beq	.L183
1162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2797              		.loc 1 1162 0
 2798 0082 5969     		ldr	r1, [r3, #20]
 2799 0084 21F04001 		bic	r1, r1, #64
 2800 0088 5961     		str	r1, [r3, #20]
1165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2801              		.loc 1 1165 0
 2802 008a 206B     		ldr	r0, [r4, #48]
 2803 008c 40B1     		cbz	r0, .L183
1171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 2804              		.loc 1 1171 0
 2805 008e FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2806              	.LVL260:
 2807 0092 20B1     		cbz	r0, .L188
1173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****         AbortCplt = 0x01U;
 2808              		.loc 1 1173 0
 2809 0094 236B     		ldr	r3, [r4, #48]
 2810 0096 0022     		movs	r2, #0
 2811 0098 5A63     		str	r2, [r3, #52]
 2812              	.LVL261:
1174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2813              		.loc 1 1174 0
 2814 009a 0122     		movs	r2, #1
 2815 009c 00E0     		b	.L183
 2816              	.LVL262:
ARM GAS  /tmp/ccP46s5c.s 			page 94


 2817              	.L188:
1178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 2818              		.loc 1 1178 0
 2819 009e 0022     		movs	r2, #0
 2820              	.L183:
 2821              	.LVL263:
1184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2822              		.loc 1 1184 0
 2823 00a0 5AB1     		cbz	r2, .L184
1187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
 2824              		.loc 1 1187 0
 2825 00a2 0023     		movs	r3, #0
 2826 00a4 6384     		strh	r3, [r4, #34]	@ movhi
1188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2827              		.loc 1 1188 0
 2828 00a6 6385     		strh	r3, [r4, #42]	@ movhi
1191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2829              		.loc 1 1191 0
 2830 00a8 A363     		str	r3, [r4, #56]
1194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 2831              		.loc 1 1194 0
 2832 00aa 2023     		movs	r3, #32
 2833 00ac 84F83530 		strb	r3, [r4, #53]
1195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2834              		.loc 1 1195 0
 2835 00b0 84F83630 		strb	r3, [r4, #54]
1198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 2836              		.loc 1 1198 0
 2837 00b4 2046     		mov	r0, r4
 2838 00b6 FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback
 2839              	.LVL264:
 2840              	.L184:
1202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2841              		.loc 1 1202 0
 2842 00ba 0020     		movs	r0, #0
 2843 00bc 10BD     		pop	{r4, pc}
 2844              	.LVL265:
 2845              	.L191:
 2846 00be 00BF     		.align	2
 2847              	.L190:
 2848 00c0 00000000 		.word	IRDA_DMATxAbortCallback
 2849 00c4 00000000 		.word	IRDA_DMARxAbortCallback
 2850              		.cfi_endproc
 2851              	.LFE80:
 2853              		.section	.text.IRDA_DMARxAbortCallback,"ax",%progbits
 2854              		.align	2
 2855              		.thumb
 2856              		.thumb_func
 2858              	IRDA_DMARxAbortCallback:
 2859              	.LFB104:
1872:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2860              		.loc 1 1872 0
 2861              		.cfi_startproc
 2862              		@ args = 0, pretend = 0, frame = 0
 2863              		@ frame_needed = 0, uses_anonymous_args = 0
 2864              	.LVL266:
 2865 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccP46s5c.s 			page 95


 2866              	.LCFI34:
 2867              		.cfi_def_cfa_offset 8
 2868              		.cfi_offset 3, -8
 2869              		.cfi_offset 14, -4
1873:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 2870              		.loc 1 1873 0
 2871 0002 406A     		ldr	r0, [r0, #36]
 2872              	.LVL267:
1875:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2873              		.loc 1 1875 0
 2874 0004 036B     		ldr	r3, [r0, #48]
 2875 0006 0022     		movs	r2, #0
 2876 0008 5A63     		str	r2, [r3, #52]
1878:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2877              		.loc 1 1878 0
 2878 000a C36A     		ldr	r3, [r0, #44]
 2879 000c 0BB1     		cbz	r3, .L193
1880:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2880              		.loc 1 1880 0
 2881 000e 5B6B     		ldr	r3, [r3, #52]
 2882 0010 53B9     		cbnz	r3, .L192
 2883              	.L193:
1887:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 2884              		.loc 1 1887 0
 2885 0012 0023     		movs	r3, #0
 2886 0014 4384     		strh	r3, [r0, #34]	@ movhi
1888:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2887              		.loc 1 1888 0
 2888 0016 4385     		strh	r3, [r0, #42]	@ movhi
1891:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2889              		.loc 1 1891 0
 2890 0018 8363     		str	r3, [r0, #56]
1894:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 2891              		.loc 1 1894 0
 2892 001a 2023     		movs	r3, #32
 2893 001c 80F83530 		strb	r3, [r0, #53]
1895:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2894              		.loc 1 1895 0
 2895 0020 80F83630 		strb	r3, [r0, #54]
1898:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 2896              		.loc 1 1898 0
 2897 0024 FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback
 2898              	.LVL268:
 2899              	.L192:
 2900 0028 08BD     		pop	{r3, pc}
 2901              		.cfi_endproc
 2902              	.LFE104:
 2904 002a 00BF     		.section	.text.IRDA_DMATxAbortCallback,"ax",%progbits
 2905              		.align	2
 2906              		.thumb
 2907              		.thumb_func
 2909              	IRDA_DMATxAbortCallback:
 2910              	.LFB103:
1834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2911              		.loc 1 1834 0
 2912              		.cfi_startproc
 2913              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccP46s5c.s 			page 96


 2914              		@ frame_needed = 0, uses_anonymous_args = 0
 2915              	.LVL269:
 2916 0000 08B5     		push	{r3, lr}
 2917              	.LCFI35:
 2918              		.cfi_def_cfa_offset 8
 2919              		.cfi_offset 3, -8
 2920              		.cfi_offset 14, -4
1835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 2921              		.loc 1 1835 0
 2922 0002 406A     		ldr	r0, [r0, #36]
 2923              	.LVL270:
1837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2924              		.loc 1 1837 0
 2925 0004 C36A     		ldr	r3, [r0, #44]
 2926 0006 0022     		movs	r2, #0
 2927 0008 5A63     		str	r2, [r3, #52]
1840:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2928              		.loc 1 1840 0
 2929 000a 036B     		ldr	r3, [r0, #48]
 2930 000c 0BB1     		cbz	r3, .L197
1842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 2931              		.loc 1 1842 0
 2932 000e 5B6B     		ldr	r3, [r3, #52]
 2933 0010 53B9     		cbnz	r3, .L196
 2934              	.L197:
1849:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 2935              		.loc 1 1849 0
 2936 0012 0023     		movs	r3, #0
 2937 0014 4384     		strh	r3, [r0, #34]	@ movhi
1850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2938              		.loc 1 1850 0
 2939 0016 4385     		strh	r3, [r0, #42]	@ movhi
1853:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2940              		.loc 1 1853 0
 2941 0018 8363     		str	r3, [r0, #56]
1856:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 2942              		.loc 1 1856 0
 2943 001a 2023     		movs	r3, #32
 2944 001c 80F83530 		strb	r3, [r0, #53]
1857:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2945              		.loc 1 1857 0
 2946 0020 80F83630 		strb	r3, [r0, #54]
1860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 2947              		.loc 1 1860 0
 2948 0024 FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback
 2949              	.LVL271:
 2950              	.L196:
 2951 0028 08BD     		pop	{r3, pc}
 2952              		.cfi_endproc
 2953              	.LFE103:
 2955 002a 00BF     		.section	.text.HAL_IRDA_AbortTransmitCpltCallback,"ax",%progbits
 2956              		.align	2
 2957              		.weak	HAL_IRDA_AbortTransmitCpltCallback
 2958              		.thumb
 2959              		.thumb_func
 2961              	HAL_IRDA_AbortTransmitCpltCallback:
 2962              	.LFB90:
ARM GAS  /tmp/ccP46s5c.s 			page 97


1558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2963              		.loc 1 1558 0
 2964              		.cfi_startproc
 2965              		@ args = 0, pretend = 0, frame = 0
 2966              		@ frame_needed = 0, uses_anonymous_args = 0
 2967              		@ link register save eliminated.
 2968              	.LVL272:
 2969 0000 7047     		bx	lr
 2970              		.cfi_endproc
 2971              	.LFE90:
 2973 0002 00BF     		.section	.text.HAL_IRDA_AbortTransmit_IT,"ax",%progbits
 2974              		.align	2
 2975              		.global	HAL_IRDA_AbortTransmit_IT
 2976              		.thumb
 2977              		.thumb_func
 2979              	HAL_IRDA_AbortTransmit_IT:
 2980              	.LFB81:
1219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 2981              		.loc 1 1219 0
 2982              		.cfi_startproc
 2983              		@ args = 0, pretend = 0, frame = 0
 2984              		@ frame_needed = 0, uses_anonymous_args = 0
 2985              	.LVL273:
1219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 2986              		.loc 1 1219 0
 2987 0000 10B5     		push	{r4, lr}
 2988              	.LCFI36:
 2989              		.cfi_def_cfa_offset 8
 2990              		.cfi_offset 4, -8
 2991              		.cfi_offset 14, -4
 2992 0002 0446     		mov	r4, r0
1221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 2993              		.loc 1 1221 0
 2994 0004 0268     		ldr	r2, [r0]
 2995 0006 D368     		ldr	r3, [r2, #12]
 2996 0008 23F0C003 		bic	r3, r3, #192
 2997 000c D360     		str	r3, [r2, #12]
1224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 2998              		.loc 1 1224 0
 2999 000e 0368     		ldr	r3, [r0]
 3000 0010 5A69     		ldr	r2, [r3, #20]
 3001 0012 12F0800F 		tst	r2, #128
 3002 0016 17D0     		beq	.L202
1226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3003              		.loc 1 1226 0
 3004 0018 5A69     		ldr	r2, [r3, #20]
 3005 001a 22F08002 		bic	r2, r2, #128
 3006 001e 5A61     		str	r2, [r3, #20]
1229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 3007              		.loc 1 1229 0
 3008 0020 C36A     		ldr	r3, [r0, #44]
 3009 0022 4BB1     		cbz	r3, .L203
1233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3010              		.loc 1 1233 0
 3011 0024 0D4A     		ldr	r2, .L206
 3012 0026 5A63     		str	r2, [r3, #52]
1236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
ARM GAS  /tmp/ccP46s5c.s 			page 98


 3013              		.loc 1 1236 0
 3014 0028 C06A     		ldr	r0, [r0, #44]
 3015              	.LVL274:
 3016 002a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3017              	.LVL275:
 3018 002e 90B1     		cbz	r0, .L204
1239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 3019              		.loc 1 1239 0
 3020 0030 E06A     		ldr	r0, [r4, #44]
 3021 0032 436B     		ldr	r3, [r0, #52]
 3022 0034 9847     		blx	r3
 3023              	.LVL276:
 3024 0036 0EE0     		b	.L204
 3025              	.LVL277:
 3026              	.L203:
1245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3027              		.loc 1 1245 0
 3028 0038 0023     		movs	r3, #0
 3029 003a 4384     		strh	r3, [r0, #34]	@ movhi
1248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3030              		.loc 1 1248 0
 3031 003c 2023     		movs	r3, #32
 3032 003e 80F83530 		strb	r3, [r0, #53]
1251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 3033              		.loc 1 1251 0
 3034 0042 FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback
 3035              	.LVL278:
 3036 0046 06E0     		b	.L204
 3037              	.LVL279:
 3038              	.L202:
1257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3039              		.loc 1 1257 0
 3040 0048 0023     		movs	r3, #0
 3041 004a 4384     		strh	r3, [r0, #34]	@ movhi
1260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3042              		.loc 1 1260 0
 3043 004c 2023     		movs	r3, #32
 3044 004e 80F83530 		strb	r3, [r0, #53]
1263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 3045              		.loc 1 1263 0
 3046 0052 FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback
 3047              	.LVL280:
 3048              	.L204:
1267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3049              		.loc 1 1267 0
 3050 0056 0020     		movs	r0, #0
 3051 0058 10BD     		pop	{r4, pc}
 3052              	.LVL281:
 3053              	.L207:
 3054 005a 00BF     		.align	2
 3055              	.L206:
 3056 005c 00000000 		.word	IRDA_DMATxOnlyAbortCallback
 3057              		.cfi_endproc
 3058              	.LFE81:
 3060              		.section	.text.IRDA_DMATxOnlyAbortCallback,"ax",%progbits
 3061              		.align	2
 3062              		.thumb
ARM GAS  /tmp/ccP46s5c.s 			page 99


 3063              		.thumb_func
 3065              	IRDA_DMATxOnlyAbortCallback:
 3066              	.LFB105:
1910:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3067              		.loc 1 1910 0
 3068              		.cfi_startproc
 3069              		@ args = 0, pretend = 0, frame = 0
 3070              		@ frame_needed = 0, uses_anonymous_args = 0
 3071              	.LVL282:
 3072 0000 08B5     		push	{r3, lr}
 3073              	.LCFI37:
 3074              		.cfi_def_cfa_offset 8
 3075              		.cfi_offset 3, -8
 3076              		.cfi_offset 14, -4
1911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3077              		.loc 1 1911 0
 3078 0002 406A     		ldr	r0, [r0, #36]
 3079              	.LVL283:
1913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3080              		.loc 1 1913 0
 3081 0004 0023     		movs	r3, #0
 3082 0006 4384     		strh	r3, [r0, #34]	@ movhi
1916:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3083              		.loc 1 1916 0
 3084 0008 2023     		movs	r3, #32
 3085 000a 80F83530 		strb	r3, [r0, #53]
1919:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 3086              		.loc 1 1919 0
 3087 000e FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback
 3088              	.LVL284:
 3089 0012 08BD     		pop	{r3, pc}
 3090              		.cfi_endproc
 3091              	.LFE105:
 3093              		.section	.text.HAL_IRDA_AbortReceiveCpltCallback,"ax",%progbits
 3094              		.align	2
 3095              		.weak	HAL_IRDA_AbortReceiveCpltCallback
 3096              		.thumb
 3097              		.thumb_func
 3099              	HAL_IRDA_AbortReceiveCpltCallback:
 3100              	.LFB91:
1573:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 3101              		.loc 1 1573 0
 3102              		.cfi_startproc
 3103              		@ args = 0, pretend = 0, frame = 0
 3104              		@ frame_needed = 0, uses_anonymous_args = 0
 3105              		@ link register save eliminated.
 3106              	.LVL285:
 3107 0000 7047     		bx	lr
 3108              		.cfi_endproc
 3109              	.LFE91:
 3111 0002 00BF     		.section	.text.HAL_IRDA_AbortReceive_IT,"ax",%progbits
 3112              		.align	2
 3113              		.global	HAL_IRDA_AbortReceive_IT
 3114              		.thumb
 3115              		.thumb_func
 3117              	HAL_IRDA_AbortReceive_IT:
 3118              	.LFB82:
ARM GAS  /tmp/ccP46s5c.s 			page 100


1284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3119              		.loc 1 1284 0
 3120              		.cfi_startproc
 3121              		@ args = 0, pretend = 0, frame = 0
 3122              		@ frame_needed = 0, uses_anonymous_args = 0
 3123              	.LVL286:
1284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3124              		.loc 1 1284 0
 3125 0000 10B5     		push	{r4, lr}
 3126              	.LCFI38:
 3127              		.cfi_def_cfa_offset 8
 3128              		.cfi_offset 4, -8
 3129              		.cfi_offset 14, -4
 3130 0002 0446     		mov	r4, r0
1286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 3131              		.loc 1 1286 0
 3132 0004 0268     		ldr	r2, [r0]
 3133 0006 D368     		ldr	r3, [r2, #12]
 3134 0008 23F49073 		bic	r3, r3, #288
 3135 000c D360     		str	r3, [r2, #12]
1287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3136              		.loc 1 1287 0
 3137 000e 0268     		ldr	r2, [r0]
 3138 0010 5369     		ldr	r3, [r2, #20]
 3139 0012 23F00103 		bic	r3, r3, #1
 3140 0016 5361     		str	r3, [r2, #20]
1290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   {
 3141              		.loc 1 1290 0
 3142 0018 0368     		ldr	r3, [r0]
 3143 001a 5A69     		ldr	r2, [r3, #20]
 3144 001c 12F0400F 		tst	r2, #64
 3145 0020 17D0     		beq	.L212
1292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3146              		.loc 1 1292 0
 3147 0022 5A69     		ldr	r2, [r3, #20]
 3148 0024 22F04002 		bic	r2, r2, #64
 3149 0028 5A61     		str	r2, [r3, #20]
1295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     {
 3150              		.loc 1 1295 0
 3151 002a 036B     		ldr	r3, [r0, #48]
 3152 002c 4BB1     		cbz	r3, .L213
1299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3153              		.loc 1 1299 0
 3154 002e 0D4A     		ldr	r2, .L216
 3155 0030 5A63     		str	r2, [r3, #52]
1302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       {
 3156              		.loc 1 1302 0
 3157 0032 006B     		ldr	r0, [r0, #48]
 3158              	.LVL287:
 3159 0034 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3160              	.LVL288:
 3161 0038 90B1     		cbz	r0, .L214
1305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****       }
 3162              		.loc 1 1305 0
 3163 003a 206B     		ldr	r0, [r4, #48]
 3164 003c 436B     		ldr	r3, [r0, #52]
 3165 003e 9847     		blx	r3
ARM GAS  /tmp/ccP46s5c.s 			page 101


 3166              	.LVL289:
 3167 0040 0EE0     		b	.L214
 3168              	.LVL290:
 3169              	.L213:
1311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3170              		.loc 1 1311 0
 3171 0042 0023     		movs	r3, #0
 3172 0044 4385     		strh	r3, [r0, #42]	@ movhi
1314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3173              		.loc 1 1314 0
 3174 0046 2023     		movs	r3, #32
 3175 0048 80F83630 		strb	r3, [r0, #54]
1317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****     }
 3176              		.loc 1 1317 0
 3177 004c FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback
 3178              	.LVL291:
 3179 0050 06E0     		b	.L214
 3180              	.LVL292:
 3181              	.L212:
1323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3182              		.loc 1 1323 0
 3183 0052 0023     		movs	r3, #0
 3184 0054 4385     		strh	r3, [r0, #42]	@ movhi
1326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3185              		.loc 1 1326 0
 3186 0056 2023     		movs	r3, #32
 3187 0058 80F83630 		strb	r3, [r0, #54]
1329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   }
 3188              		.loc 1 1329 0
 3189 005c FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback
 3190              	.LVL293:
 3191              	.L214:
1333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3192              		.loc 1 1333 0
 3193 0060 0020     		movs	r0, #0
 3194 0062 10BD     		pop	{r4, pc}
 3195              	.LVL294:
 3196              	.L217:
 3197              		.align	2
 3198              	.L216:
 3199 0064 00000000 		.word	IRDA_DMARxOnlyAbortCallback
 3200              		.cfi_endproc
 3201              	.LFE82:
 3203              		.section	.text.IRDA_DMARxOnlyAbortCallback,"ax",%progbits
 3204              		.align	2
 3205              		.thumb
 3206              		.thumb_func
 3208              	IRDA_DMARxOnlyAbortCallback:
 3209              	.LFB106:
1931:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3210              		.loc 1 1931 0
 3211              		.cfi_startproc
 3212              		@ args = 0, pretend = 0, frame = 0
 3213              		@ frame_needed = 0, uses_anonymous_args = 0
 3214              	.LVL295:
 3215 0000 08B5     		push	{r3, lr}
 3216              	.LCFI39:
ARM GAS  /tmp/ccP46s5c.s 			page 102


 3217              		.cfi_def_cfa_offset 8
 3218              		.cfi_offset 3, -8
 3219              		.cfi_offset 14, -4
1932:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3220              		.loc 1 1932 0
 3221 0002 406A     		ldr	r0, [r0, #36]
 3222              	.LVL296:
1934:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3223              		.loc 1 1934 0
 3224 0004 0023     		movs	r3, #0
 3225 0006 4385     		strh	r3, [r0, #42]	@ movhi
1937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3226              		.loc 1 1937 0
 3227 0008 2023     		movs	r3, #32
 3228 000a 80F83630 		strb	r3, [r0, #54]
1940:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 3229              		.loc 1 1940 0
 3230 000e FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback
 3231              	.LVL297:
 3232 0012 08BD     		pop	{r3, pc}
 3233              		.cfi_endproc
 3234              	.LFE106:
 3236              		.section	.text.HAL_IRDA_GetState,"ax",%progbits
 3237              		.align	2
 3238              		.global	HAL_IRDA_GetState
 3239              		.thumb
 3240              		.thumb_func
 3242              	HAL_IRDA_GetState:
 3243              	.LFB92:
1610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 3244              		.loc 1 1610 0
 3245              		.cfi_startproc
 3246              		@ args = 0, pretend = 0, frame = 0
 3247              		@ frame_needed = 0, uses_anonymous_args = 0
 3248              		@ link register save eliminated.
 3249              	.LVL298:
1612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   temp2 = hirda->RxState;
 3250              		.loc 1 1612 0
 3251 0000 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 3252              	.LVL299:
1613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   
 3253              		.loc 1 1613 0
 3254 0004 90F83600 		ldrb	r0, [r0, #54]	@ zero_extendqisi2
 3255              	.LVL300:
1616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3256              		.loc 1 1616 0
 3257 0008 1843     		orrs	r0, r0, r3
 3258              	.LVL301:
 3259 000a 7047     		bx	lr
 3260              		.cfi_endproc
 3261              	.LFE92:
 3263              		.section	.text.HAL_IRDA_GetError,"ax",%progbits
 3264              		.align	2
 3265              		.global	HAL_IRDA_GetError
 3266              		.thumb
 3267              		.thumb_func
 3269              	HAL_IRDA_GetError:
ARM GAS  /tmp/ccP46s5c.s 			page 103


 3270              	.LFB93:
1625:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c ****   return hirda->ErrorCode;
 3271              		.loc 1 1625 0
 3272              		.cfi_startproc
 3273              		@ args = 0, pretend = 0, frame = 0
 3274              		@ frame_needed = 0, uses_anonymous_args = 0
 3275              		@ link register save eliminated.
 3276              	.LVL302:
1626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** }
 3277              		.loc 1 1626 0
 3278 0000 806B     		ldr	r0, [r0, #56]
 3279              	.LVL303:
1627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_irda.c **** 
 3280              		.loc 1 1627 0
 3281 0002 7047     		bx	lr
 3282              		.cfi_endproc
 3283              	.LFE93:
 3285              		.text
 3286              	.Letext0:
 3287              		.file 2 "/opt/toolchain/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.
 3288              		.file 3 "/opt/toolchain/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 3289              		.file 4 "Drivers/CMSIS/Device/Inc/stm32f103xb.h"
 3290              		.file 5 "Drivers/CMSIS/Device/Inc/stm32f1xx.h"
 3291              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 3292              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 3293              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_irda.h"
 3294              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 3295              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 3296              		.file 11 "Drivers/CMSIS/Inc/core_cm3.h"
ARM GAS  /tmp/ccP46s5c.s 			page 104


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_hal_irda.c
     /tmp/ccP46s5c.s:20     .text.IRDA_EndTxTransfer:00000000 $t
     /tmp/ccP46s5c.s:24     .text.IRDA_EndTxTransfer:00000000 IRDA_EndTxTransfer
     /tmp/ccP46s5c.s:46     .text.IRDA_EndRxTransfer:00000000 $t
     /tmp/ccP46s5c.s:50     .text.IRDA_EndRxTransfer:00000000 IRDA_EndRxTransfer
     /tmp/ccP46s5c.s:76     .text.IRDA_Transmit_IT:00000000 $t
     /tmp/ccP46s5c.s:80     .text.IRDA_Transmit_IT:00000000 IRDA_Transmit_IT
     /tmp/ccP46s5c.s:168    .text.IRDA_SetConfig:00000000 $t
     /tmp/ccP46s5c.s:172    .text.IRDA_SetConfig:00000000 IRDA_SetConfig
     /tmp/ccP46s5c.s:353    .text.IRDA_SetConfig:000001a4 $d
     /tmp/ccP46s5c.s:359    .text.IRDA_WaitOnFlagUntilTimeout:00000000 $t
     /tmp/ccP46s5c.s:363    .text.IRDA_WaitOnFlagUntilTimeout:00000000 IRDA_WaitOnFlagUntilTimeout
     /tmp/ccP46s5c.s:440    .text.HAL_IRDA_MspInit:00000000 $t
     /tmp/ccP46s5c.s:445    .text.HAL_IRDA_MspInit:00000000 HAL_IRDA_MspInit
     /tmp/ccP46s5c.s:458    .text.HAL_IRDA_Init:00000000 $t
     /tmp/ccP46s5c.s:463    .text.HAL_IRDA_Init:00000000 HAL_IRDA_Init
     /tmp/ccP46s5c.s:561    .text.HAL_IRDA_MspDeInit:00000000 $t
     /tmp/ccP46s5c.s:566    .text.HAL_IRDA_MspDeInit:00000000 HAL_IRDA_MspDeInit
     /tmp/ccP46s5c.s:579    .text.HAL_IRDA_DeInit:00000000 $t
     /tmp/ccP46s5c.s:584    .text.HAL_IRDA_DeInit:00000000 HAL_IRDA_DeInit
     /tmp/ccP46s5c.s:636    .text.HAL_IRDA_Transmit:00000000 $t
     /tmp/ccP46s5c.s:641    .text.HAL_IRDA_Transmit:00000000 HAL_IRDA_Transmit
     /tmp/ccP46s5c.s:824    .text.HAL_IRDA_Receive:00000000 $t
     /tmp/ccP46s5c.s:829    .text.HAL_IRDA_Receive:00000000 HAL_IRDA_Receive
     /tmp/ccP46s5c.s:1019   .text.HAL_IRDA_Transmit_IT:00000000 $t
     /tmp/ccP46s5c.s:1024   .text.HAL_IRDA_Transmit_IT:00000000 HAL_IRDA_Transmit_IT
     /tmp/ccP46s5c.s:1099   .text.HAL_IRDA_Receive_IT:00000000 $t
     /tmp/ccP46s5c.s:1104   .text.HAL_IRDA_Receive_IT:00000000 HAL_IRDA_Receive_IT
     /tmp/ccP46s5c.s:1189   .text.HAL_IRDA_Transmit_DMA:00000000 $t
     /tmp/ccP46s5c.s:1194   .text.HAL_IRDA_Transmit_DMA:00000000 HAL_IRDA_Transmit_DMA
     /tmp/ccP46s5c.s:1305   .text.HAL_IRDA_Transmit_DMA:00000080 $d
     /tmp/ccP46s5c.s:1952   .text.IRDA_DMATransmitCplt:00000000 IRDA_DMATransmitCplt
     /tmp/ccP46s5c.s:2056   .text.IRDA_DMATransmitHalfCplt:00000000 IRDA_DMATransmitHalfCplt
     /tmp/ccP46s5c.s:2350   .text.IRDA_DMAError:00000000 IRDA_DMAError
     /tmp/ccP46s5c.s:1312   .text.HAL_IRDA_Receive_DMA:00000000 $t
     /tmp/ccP46s5c.s:1317   .text.HAL_IRDA_Receive_DMA:00000000 HAL_IRDA_Receive_DMA
     /tmp/ccP46s5c.s:1450   .text.HAL_IRDA_Receive_DMA:0000009c $d
     /tmp/ccP46s5c.s:2102   .text.IRDA_DMAReceiveCplt:00000000 IRDA_DMAReceiveCplt
     /tmp/ccP46s5c.s:2304   .text.IRDA_DMAReceiveHalfCplt:00000000 IRDA_DMAReceiveHalfCplt
     /tmp/ccP46s5c.s:1457   .text.HAL_IRDA_DMAPause:00000000 $t
     /tmp/ccP46s5c.s:1462   .text.HAL_IRDA_DMAPause:00000000 HAL_IRDA_DMAPause
     /tmp/ccP46s5c.s:1540   .text.HAL_IRDA_DMAResume:00000000 $t
     /tmp/ccP46s5c.s:1545   .text.HAL_IRDA_DMAResume:00000000 HAL_IRDA_DMAResume
     /tmp/ccP46s5c.s:1643   .text.HAL_IRDA_DMAStop:00000000 $t
     /tmp/ccP46s5c.s:1648   .text.HAL_IRDA_DMAStop:00000000 HAL_IRDA_DMAStop
     /tmp/ccP46s5c.s:1726   .text.HAL_IRDA_Abort:00000000 $t
     /tmp/ccP46s5c.s:1731   .text.HAL_IRDA_Abort:00000000 HAL_IRDA_Abort
     /tmp/ccP46s5c.s:1813   .text.HAL_IRDA_AbortTransmit:00000000 $t
     /tmp/ccP46s5c.s:1818   .text.HAL_IRDA_AbortTransmit:00000000 HAL_IRDA_AbortTransmit
     /tmp/ccP46s5c.s:1869   .text.HAL_IRDA_AbortReceive:00000000 $t
     /tmp/ccP46s5c.s:1874   .text.HAL_IRDA_AbortReceive:00000000 HAL_IRDA_AbortReceive
     /tmp/ccP46s5c.s:1930   .text.HAL_IRDA_TxCpltCallback:00000000 $t
     /tmp/ccP46s5c.s:1935   .text.HAL_IRDA_TxCpltCallback:00000000 HAL_IRDA_TxCpltCallback
     /tmp/ccP46s5c.s:1948   .text.IRDA_DMATransmitCplt:00000000 $t
     /tmp/ccP46s5c.s:2000   .text.IRDA_EndTransmit_IT:00000000 $t
     /tmp/ccP46s5c.s:2004   .text.IRDA_EndTransmit_IT:00000000 IRDA_EndTransmit_IT
ARM GAS  /tmp/ccP46s5c.s 			page 105


     /tmp/ccP46s5c.s:2034   .text.HAL_IRDA_TxHalfCpltCallback:00000000 $t
     /tmp/ccP46s5c.s:2039   .text.HAL_IRDA_TxHalfCpltCallback:00000000 HAL_IRDA_TxHalfCpltCallback
     /tmp/ccP46s5c.s:2052   .text.IRDA_DMATransmitHalfCplt:00000000 $t
     /tmp/ccP46s5c.s:2080   .text.HAL_IRDA_RxCpltCallback:00000000 $t
     /tmp/ccP46s5c.s:2085   .text.HAL_IRDA_RxCpltCallback:00000000 HAL_IRDA_RxCpltCallback
     /tmp/ccP46s5c.s:2098   .text.IRDA_DMAReceiveCplt:00000000 $t
     /tmp/ccP46s5c.s:2155   .text.IRDA_Receive_IT:00000000 $t
     /tmp/ccP46s5c.s:2159   .text.IRDA_Receive_IT:00000000 IRDA_Receive_IT
     /tmp/ccP46s5c.s:2282   .text.HAL_IRDA_RxHalfCpltCallback:00000000 $t
     /tmp/ccP46s5c.s:2287   .text.HAL_IRDA_RxHalfCpltCallback:00000000 HAL_IRDA_RxHalfCpltCallback
     /tmp/ccP46s5c.s:2300   .text.IRDA_DMAReceiveHalfCplt:00000000 $t
     /tmp/ccP46s5c.s:2328   .text.HAL_IRDA_ErrorCallback:00000000 $t
     /tmp/ccP46s5c.s:2333   .text.HAL_IRDA_ErrorCallback:00000000 HAL_IRDA_ErrorCallback
     /tmp/ccP46s5c.s:2346   .text.IRDA_DMAError:00000000 $t
     /tmp/ccP46s5c.s:2421   .text.HAL_IRDA_IRQHandler:00000000 $t
     /tmp/ccP46s5c.s:2426   .text.HAL_IRDA_IRQHandler:00000000 HAL_IRDA_IRQHandler
     /tmp/ccP46s5c.s:2636   .text.HAL_IRDA_IRQHandler:00000118 $d
     /tmp/ccP46s5c.s:2645   .text.IRDA_DMAAbortOnError:00000000 IRDA_DMAAbortOnError
     /tmp/ccP46s5c.s:2641   .text.IRDA_DMAAbortOnError:00000000 $t
     /tmp/ccP46s5c.s:2673   .text.HAL_IRDA_AbortCpltCallback:00000000 $t
     /tmp/ccP46s5c.s:2678   .text.HAL_IRDA_AbortCpltCallback:00000000 HAL_IRDA_AbortCpltCallback
     /tmp/ccP46s5c.s:2691   .text.HAL_IRDA_Abort_IT:00000000 $t
     /tmp/ccP46s5c.s:2696   .text.HAL_IRDA_Abort_IT:00000000 HAL_IRDA_Abort_IT
     /tmp/ccP46s5c.s:2848   .text.HAL_IRDA_Abort_IT:000000c0 $d
     /tmp/ccP46s5c.s:2909   .text.IRDA_DMATxAbortCallback:00000000 IRDA_DMATxAbortCallback
     /tmp/ccP46s5c.s:2858   .text.IRDA_DMARxAbortCallback:00000000 IRDA_DMARxAbortCallback
     /tmp/ccP46s5c.s:2854   .text.IRDA_DMARxAbortCallback:00000000 $t
     /tmp/ccP46s5c.s:2905   .text.IRDA_DMATxAbortCallback:00000000 $t
     /tmp/ccP46s5c.s:2956   .text.HAL_IRDA_AbortTransmitCpltCallback:00000000 $t
     /tmp/ccP46s5c.s:2961   .text.HAL_IRDA_AbortTransmitCpltCallback:00000000 HAL_IRDA_AbortTransmitCpltCallback
     /tmp/ccP46s5c.s:2974   .text.HAL_IRDA_AbortTransmit_IT:00000000 $t
     /tmp/ccP46s5c.s:2979   .text.HAL_IRDA_AbortTransmit_IT:00000000 HAL_IRDA_AbortTransmit_IT
     /tmp/ccP46s5c.s:3056   .text.HAL_IRDA_AbortTransmit_IT:0000005c $d
     /tmp/ccP46s5c.s:3065   .text.IRDA_DMATxOnlyAbortCallback:00000000 IRDA_DMATxOnlyAbortCallback
     /tmp/ccP46s5c.s:3061   .text.IRDA_DMATxOnlyAbortCallback:00000000 $t
     /tmp/ccP46s5c.s:3094   .text.HAL_IRDA_AbortReceiveCpltCallback:00000000 $t
     /tmp/ccP46s5c.s:3099   .text.HAL_IRDA_AbortReceiveCpltCallback:00000000 HAL_IRDA_AbortReceiveCpltCallback
     /tmp/ccP46s5c.s:3112   .text.HAL_IRDA_AbortReceive_IT:00000000 $t
     /tmp/ccP46s5c.s:3117   .text.HAL_IRDA_AbortReceive_IT:00000000 HAL_IRDA_AbortReceive_IT
     /tmp/ccP46s5c.s:3199   .text.HAL_IRDA_AbortReceive_IT:00000064 $d
     /tmp/ccP46s5c.s:3208   .text.IRDA_DMARxOnlyAbortCallback:00000000 IRDA_DMARxOnlyAbortCallback
     /tmp/ccP46s5c.s:3204   .text.IRDA_DMARxOnlyAbortCallback:00000000 $t
     /tmp/ccP46s5c.s:3237   .text.HAL_IRDA_GetState:00000000 $t
     /tmp/ccP46s5c.s:3242   .text.HAL_IRDA_GetState:00000000 HAL_IRDA_GetState
     /tmp/ccP46s5c.s:3264   .text.HAL_IRDA_GetError:00000000 $t
     /tmp/ccP46s5c.s:3269   .text.HAL_IRDA_GetError:00000000 HAL_IRDA_GetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
