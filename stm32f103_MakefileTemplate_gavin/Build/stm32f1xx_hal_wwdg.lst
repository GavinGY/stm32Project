ARM GAS  /tmp/ccVD7fJJ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_hal_wwdg.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_WWDG_MspInit,"ax",%progbits
  20              		.align	2
  21              		.weak	HAL_WWDG_MspInit
  22              		.thumb
  23              		.thumb_func
  25              	HAL_WWDG_MspInit:
  26              	.LFB65:
  27              		.file 1 "./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c"
   1:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
   2:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ******************************************************************************
   3:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @file    stm32f1xx_hal_wwdg.c
   4:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @author  MCD Application Team
   5:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @version V1.1.1
   6:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @date    12-May-2017
   7:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief   WWDG HAL module driver.
   8:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *          This file provides firmware functions to manage the following 
   9:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *          functionalities of the Window Watchdog (WWDG) peripheral:
  10:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *           + Initialization and de-initialization functions
  11:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *           + IO operation functions
  12:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *           + Peripheral State functions
  13:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   @verbatim
  14:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================
  15:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****                       ##### WWDG specific features #####
  16:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================
  17:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   [..] 
  18:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     Once enabled the WWDG generates a system reset on expiry of a programmed
  19:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     time period, unless the program refreshes the counter (downcounter) 
  20:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     before reaching 0x3F value (i.e. a reset is generated when the counter
  21:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     value rolls over from 0x40 to 0x3F). 
  22:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****        
  23:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) An MCU reset is also generated if the counter value is refreshed
  24:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         before the counter has reached the refresh window value. This 
  25:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         implies that the counter must be refreshed in a limited window.
  26:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Once enabled the WWDG cannot be disabled except by a system reset.
  27:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) WWDGRST flag in RCC_CSR register can be used to inform when a WWDG
  28:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         reset occurs.               
  29:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) The WWDG counter input clock is derived from the APB clock divided 
  30:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         by a programmable prescaler.
  31:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) WWDG clock (Hz) = PCLK1 / (4096 * Prescaler)
ARM GAS  /tmp/ccVD7fJJ.s 			page 2


  32:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) WWDG timeout (mS) = 1000 * Counter / WWDG clock
  33:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) WWDG Counter refresh is allowed between the following limits :
  34:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         (++) min time (mS) = 1000 * (Counter _ Window) / WWDG clock
  35:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         (++) max time (mS) = 1000 * (Counter _ 0x40) / WWDG clock
  36:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     
  37:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Min-max timeout value at 36 MHz(PCLK1): 910 us / 58.25 ms 
  38:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  39:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) The Early Wakeup Interrupt (EWI) can be used if specific safety 
  40:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         operations or data logging must be performed before the actual reset is
  41:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         generated. When the downcounter reaches the value 0x40, an EWI interrupt
  42:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         is generated and the corresponding interrupt service routine (ISR) can 
  43:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         be used to trigger specific actions (such as communications or data 
  44:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         logging), before resetting the device.
  45:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         In some applications, the EWI interrupt can be used to manage a software
  46:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         system check and/or system recovery/graceful degradation, without 
  47:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         generating a WWDG reset. In this case, the corresponding interrupt 
  48:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         service routine (ISR) should reload the WWDG counter to avoid the WWDG 
  49:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         reset, then trigger the required actions.
  50:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         Note:When the EWI interrupt cannot be served, e.g. due to a system lock 
  51:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         in a higher priority task, the WWDG reset will eventually be generated.
  52:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  53:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Debug mode : When the microcontroller enters debug mode (core halted),
  54:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         the WWDG counter either continues to work normally or stops, depending 
  55:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         on DBG_WWDG_STOP configuration bit in DBG module, accessible through
  56:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         __HAL_DBGMCU_FREEZE_WWDG() and __HAL_DBGMCU_UNFREEZE_WWDG() macros
  57:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  58:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****                      ##### How to use this driver #####
  59:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================
  60:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   [..]
  61:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Enable WWDG APB1 clock using __HAL_RCC_WWDG_CLK_ENABLE().
  62:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  63:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Set the WWDG prescaler, refresh window, counter value and Early Wakeup 
  64:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         Interrupt mode using using HAL_WWDG_Init() function.
  65:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         This enables WWDG peripheral and the downcounter starts downcounting 
  66:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         from given counter value.
  67:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         Init function can be called again to modify all watchdog parameters, 
  68:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         however if EWI mode has been set once, it can't be clear until next 
  69:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         reset.
  70:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  71:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) The application program must refresh the WWDG counter at regular
  72:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         intervals during normal operation to prevent an MCU reset using
  73:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         HAL_WWDG_Refresh() function. This operation must occur only when
  74:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         the counter is lower than the window value already programmed.
  75:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  76:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) if Early Wakeup Interrupt mode is enable an interrupt is generated when 
  77:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         the counter reaches 0x40. User can add his own code in weak function 
  78:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****         HAL_WWDG_EarlyWakeupCallback().
  79:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  80:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****      *** WWDG HAL driver macros list ***
  81:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****      ==================================
  82:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****      [..]
  83:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****        Below the list of most used macros in WWDG HAL driver.
  84:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  85:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       (+) __HAL_WWDG_GET_IT_SOURCE: Check the selected WWDG's interrupt source.
  86:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       (+) __HAL_WWDG_GET_FLAG: Get the selected WWDG's flag status.
  87:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       (+) __HAL_WWDG_CLEAR_FLAG: Clear the WWDG's pending flags.
  88:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
ARM GAS  /tmp/ccVD7fJJ.s 			page 3


  89:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   @endverbatim
  90:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ******************************************************************************
  91:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @attention
  92:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *
  93:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  94:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *
  95:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * Redistribution and use in source and binary forms, with or without modification,
  96:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * are permitted provided that the following conditions are met:
  97:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  98:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *      this list of conditions and the following disclaimer.
  99:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *      this list of conditions and the following disclaimer in the documentation
 101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *      and/or other materials provided with the distribution.
 102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *      may be used to endorse or promote products derived from this software
 104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *      without specific prior written permission.
 105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *
 106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *
 117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ******************************************************************************
 118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Includes ------------------------------------------------------------------*/
 121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** #include "stm32f1xx_hal.h"
 122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /** @addtogroup STM32F1xx_HAL_Driver
 124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @{
 125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** #ifdef HAL_WWDG_MODULE_ENABLED
 128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /** @defgroup WWDG WWDG
 129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief WWDG HAL module driver.
 130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @{
 131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Private typedef -----------------------------------------------------------*/
 134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Private define ------------------------------------------------------------*/
 135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Private macro -------------------------------------------------------------*/
 136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Private variables ---------------------------------------------------------*/
 137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Private function prototypes -----------------------------------------------*/
 138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /* Exported functions --------------------------------------------------------*/
 139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /** @defgroup WWDG_Exported_Functions WWDG Exported Functions
 141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @{
 142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /** @defgroup WWDG_Exported_Functions_Group1 Initialization and Configuration functions
 145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *  @brief    Initialization and Configuration functions.
ARM GAS  /tmp/ccVD7fJJ.s 			page 4


 146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *
 147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** @verbatim
 148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================
 149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****           ##### Initialization and Configuration functions #####
 150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================
 151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   [..]  
 152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     This section provides functions allowing to:
 153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       (+) Initialize and start the WWDG according to the specified parameters
 154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****           in the WWDG_InitTypeDef of associated handle.
 155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       (+) Initialize the WWDG MSP.
 156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** @endverbatim
 158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @{
 159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
 162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief  Initialize the WWDG according to the specified.
 163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         parameters in the WWDG_InitTypeDef of  associated handle.
 164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @retval HAL status
 167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
 169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** {
 170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check the WWDG handle allocation */
 171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   if(hwwdg == NULL)
 172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   {
 173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     return HAL_ERROR;
 174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   }
 175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check the parameters */
 177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   assert_param(IS_WWDG_ALL_INSTANCE(hwwdg->Instance));
 178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   assert_param(IS_WWDG_PRESCALER(hwwdg->Init.Prescaler));
 179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
 180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
 181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));
 182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Init the low level hardware */
 184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   HAL_WWDG_MspInit(hwwdg);
 185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Set WWDG Counter */
 187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Set WWDG Prescaler and Window */
 190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window
 191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Return function status */
 193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   return HAL_OK;
 194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** }
 195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
 197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief  Initialize the WWDG MSP.
 198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @note   When rewriting this function in user file, mechanism may be added
 201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         to avoid multiple initialize when HAL_WWDG_Init function is called
 202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         again to change parameters.
ARM GAS  /tmp/ccVD7fJJ.s 			page 5


 203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @retval None
 204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** __weak void HAL_WWDG_MspInit(WWDG_HandleTypeDef *hwwdg)
 206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** {
  28              		.loc 1 206 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE65:
  38 0002 00BF     		.section	.text.HAL_WWDG_Init,"ax",%progbits
  39              		.align	2
  40              		.global	HAL_WWDG_Init
  41              		.thumb
  42              		.thumb_func
  44              	HAL_WWDG_Init:
  45              	.LFB64:
 169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check the WWDG handle allocation */
  46              		.loc 1 169 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              	.LVL1:
 171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   {
  51              		.loc 1 171 0
  52 0000 88B1     		cbz	r0, .L4
 169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check the WWDG handle allocation */
  53              		.loc 1 169 0
  54 0002 10B5     		push	{r4, lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 4, -8
  58              		.cfi_offset 14, -4
  59 0004 0446     		mov	r4, r0
 184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  60              		.loc 1 184 0
  61 0006 FFF7FEFF 		bl	HAL_WWDG_MspInit
  62              	.LVL2:
 187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  63              		.loc 1 187 0
  64 000a 2268     		ldr	r2, [r4]
  65 000c E368     		ldr	r3, [r4, #12]
  66 000e 43F08003 		orr	r3, r3, #128
  67 0012 1360     		str	r3, [r2]
 190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
  68              		.loc 1 190 0
  69 0014 2168     		ldr	r1, [r4]
  70 0016 2269     		ldr	r2, [r4, #16]
  71 0018 6368     		ldr	r3, [r4, #4]
  72 001a 1A43     		orrs	r2, r2, r3
  73 001c A368     		ldr	r3, [r4, #8]
  74 001e 1343     		orrs	r3, r3, r2
  75 0020 4B60     		str	r3, [r1, #4]
 193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** }
ARM GAS  /tmp/ccVD7fJJ.s 			page 6


  76              		.loc 1 193 0
  77 0022 0020     		movs	r0, #0
  78 0024 10BD     		pop	{r4, pc}
  79              	.LVL3:
  80              	.L4:
  81              	.LCFI1:
  82              		.cfi_def_cfa_offset 0
  83              		.cfi_restore 4
  84              		.cfi_restore 14
 173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   }
  85              		.loc 1 173 0
  86 0026 0120     		movs	r0, #1
  87              	.LVL4:
  88 0028 7047     		bx	lr
  89              		.cfi_endproc
  90              	.LFE64:
  92 002a 00BF     		.section	.text.HAL_WWDG_Refresh,"ax",%progbits
  93              		.align	2
  94              		.global	HAL_WWDG_Refresh
  95              		.thumb
  96              		.thumb_func
  98              	HAL_WWDG_Refresh:
  99              	.LFB66:
 207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Prevent unused argument(s) compilation warning */
 208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   UNUSED(hwwdg);
 209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****            the HAL_WWDG_MspInit could be implemented in the user file
 212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****    */
 213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** }
 214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
 216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @}
 217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /** @defgroup WWDG_Exported_Functions_Group2 IO operation functions
 220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****  *  @brief    IO operation functions 
 221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****  *
 222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** @verbatim
 223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================
 224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****                       ##### IO operation functions #####
 225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   ==============================================================================  
 226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   [..]
 227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     This section provides functions allowing to:
 228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Refresh the WWDG.
 229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     (+) Handle WWDG interrupt request and associated function callback.
 230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** @endverbatim
 232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @{
 233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
 236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief  Refresh the WWDG.
 237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @retval HAL status
 240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
ARM GAS  /tmp/ccVD7fJJ.s 			page 7


 241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
 242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** {
 100              		.loc 1 242 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105              	.LVL5:
 243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Write to WWDG CR the WWDG Counter value to refresh with */
 244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 106              		.loc 1 244 0
 107 0000 0368     		ldr	r3, [r0]
 108 0002 C268     		ldr	r2, [r0, #12]
 109 0004 1A60     		str	r2, [r3]
 245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Return function status */
 247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   return HAL_OK;
 248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** }
 110              		.loc 1 248 0
 111 0006 0020     		movs	r0, #0
 112              	.LVL6:
 113 0008 7047     		bx	lr
 114              		.cfi_endproc
 115              	.LFE66:
 117 000a 00BF     		.section	.text.HAL_WWDG_EarlyWakeupCallback,"ax",%progbits
 118              		.align	2
 119              		.weak	HAL_WWDG_EarlyWakeupCallback
 120              		.thumb
 121              		.thumb_func
 123              	HAL_WWDG_EarlyWakeupCallback:
 124              	.LFB68:
 249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
 251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief  Handle WWDG interrupt request.
 252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @note   The Early Wakeup Interrupt (EWI) can be used if specific safety operations
 253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         or data logging must be performed before the actual reset is generated.
 254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         The EWI interrupt is enabled by calling HAL_WWDG_Init function with 
 255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         EWIMode set to WWDG_EWI_ENABLE.
 256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         When the downcounter reaches the value 0x40, and EWI interrupt is
 257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         generated and the corresponding Interrupt Service Routine (ISR) can
 258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         be used to trigger specific actions (such as communications or data
 259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *         logging), before resetting the device.
 260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @retval None
 263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
 265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** {
 266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check if Early Wakeup Interrupt is enable */
 267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   if(__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   {
 269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     /* Check if WWDG Early Wakeup Interrupt occurred */
 270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     if(__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     {
 272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       /* Clear the WWDG Early Wakeup flag */
 273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
ARM GAS  /tmp/ccVD7fJJ.s 			page 8


 275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       /* Early Wakeup callback */ 
 276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****       HAL_WWDG_EarlyWakeupCallback(hwwdg);
 277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     }
 278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   }
 279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** }
 280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** /**
 282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @brief  WWDG Early Wakeup callback.
 283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @param  hwwdg : pointer to a WWDG_HandleTypeDef structure that contains
 284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   * @retval None
 286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   */
 287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** __weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef* hwwdg)
 288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** {
 125              		.loc 1 288 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
 130              	.LVL7:
 131 0000 7047     		bx	lr
 132              		.cfi_endproc
 133              	.LFE68:
 135 0002 00BF     		.section	.text.HAL_WWDG_IRQHandler,"ax",%progbits
 136              		.align	2
 137              		.global	HAL_WWDG_IRQHandler
 138              		.thumb
 139              		.thumb_func
 141              	HAL_WWDG_IRQHandler:
 142              	.LFB67:
 265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check if Early Wakeup Interrupt is enable */
 143              		.loc 1 265 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              	.LVL8:
 265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   /* Check if Early Wakeup Interrupt is enable */
 148              		.loc 1 265 0
 149 0000 08B5     		push	{r3, lr}
 150              	.LCFI2:
 151              		.cfi_def_cfa_offset 8
 152              		.cfi_offset 3, -8
 153              		.cfi_offset 14, -4
 267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****   {
 154              		.loc 1 267 0
 155 0002 0368     		ldr	r3, [r0]
 156 0004 5A68     		ldr	r2, [r3, #4]
 157 0006 12F4007F 		tst	r2, #512
 158 000a 08D0     		beq	.L9
 270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     {
 159              		.loc 1 270 0
 160 000c 9A68     		ldr	r2, [r3, #8]
 161 000e 12F0010F 		tst	r2, #1
 162 0012 04D0     		beq	.L9
 273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c **** 
 163              		.loc 1 273 0
 164 0014 6FF00102 		mvn	r2, #1
ARM GAS  /tmp/ccVD7fJJ.s 			page 9


 165 0018 9A60     		str	r2, [r3, #8]
 276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_wwdg.c ****     }
 166              		.loc 1 276 0
 167 001a FFF7FEFF 		bl	HAL_WWDG_EarlyWakeupCallback
 168              	.LVL9:
 169              	.L9:
 170 001e 08BD     		pop	{r3, pc}
 171              		.cfi_endproc
 172              	.LFE67:
 174              		.text
 175              	.Letext0:
 176              		.file 2 "/opt/toolchain/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.
 177              		.file 3 "/opt/toolchain/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 178              		.file 4 "Drivers/CMSIS/Device/Inc/stm32f103xb.h"
 179              		.file 5 "Drivers/CMSIS/Device/Inc/stm32f1xx.h"
 180              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 181              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_wwdg.h"
 182              		.file 8 "Drivers/CMSIS/Inc/core_cm3.h"
ARM GAS  /tmp/ccVD7fJJ.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_hal_wwdg.c
     /tmp/ccVD7fJJ.s:20     .text.HAL_WWDG_MspInit:00000000 $t
     /tmp/ccVD7fJJ.s:25     .text.HAL_WWDG_MspInit:00000000 HAL_WWDG_MspInit
     /tmp/ccVD7fJJ.s:39     .text.HAL_WWDG_Init:00000000 $t
     /tmp/ccVD7fJJ.s:44     .text.HAL_WWDG_Init:00000000 HAL_WWDG_Init
     /tmp/ccVD7fJJ.s:93     .text.HAL_WWDG_Refresh:00000000 $t
     /tmp/ccVD7fJJ.s:98     .text.HAL_WWDG_Refresh:00000000 HAL_WWDG_Refresh
     /tmp/ccVD7fJJ.s:118    .text.HAL_WWDG_EarlyWakeupCallback:00000000 $t
     /tmp/ccVD7fJJ.s:123    .text.HAL_WWDG_EarlyWakeupCallback:00000000 HAL_WWDG_EarlyWakeupCallback
     /tmp/ccVD7fJJ.s:136    .text.HAL_WWDG_IRQHandler:00000000 $t
     /tmp/ccVD7fJJ.s:141    .text.HAL_WWDG_IRQHandler:00000000 HAL_WWDG_IRQHandler
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
